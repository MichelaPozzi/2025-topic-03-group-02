Zh = Zm+tc*(Zsd/sqrt(N))
c('95% CI')
Zl
Zh
c('Is Expected Value within 95% CI?')
Zl < lambda & Zh > lambda
#1
lambda=84 * (1/3)
c('Expected Value')
lambda
#2
red = c(12, 16, 17, 12, 16, 13, 11, 18, 13, 19)
green = c(11, 10, 15, 16, 12, 14, 13, 10, 13, 17)
read_and_green = red + green
read_and_green
N = 10
df = N -1
tc = qt(c(0.975), df)
Zm = mean(read_and_green)
Zsd = sd(read_and_green)
Zl = Zm-tc*(Zsd/sqrt(N))
Zh = Zm+tc*(Zsd/sqrt(N))
c('95% CI')
Zl
Zh
c('Is Expected Value within 95% CI?')
Zl < lambda & Zh > lambda
dat = read.delim('https://tinyurl.com/y4fark9g')
dat = read.delim('https://tinyurl.com/y4fark9g')
library(knitr)
library(rmdformats)
## Global options
options(max.print="120")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=120)
opts_knit$set(root.dir  = "~/")
dat = read.delim('https://tinyurl.com/y4fark9g')
library(knitr)
library(rmdformats)
## Global options
options(max.print="120")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=120)
opts_knit$set(root.dir  = "~/")
dat = read.delim('https://tinyurl.com/y4fark9g')
library(knitr)
library(rmdformats)
## Global options
options(max.print="120")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=120)
opts_knit$set(root.dir  = "~/")
dat = read.delim('https://tinyurl.com/y4fark9g')
# set the row names using the column id
rownames(dat) = dat$id
summary(dat)
# Identify the rows corresponding to males and females
rows.men = which(dat$gender=='male')
rows.women = which(dat$gender=='female')
# Select the weight values accordingly
weight.men = dat$weight[rows.men]
weight.women = dat$weight[rows.women]
# Visualize the distributions as histograms
hist(weight.men, col = rgb(red = 0,green = 0.5,blue = 1,alpha = 0.9), breaks = 15, main = "Histogram of weight", xlab = "Weight", probability = TRUE);hist(weight.women, col = rgb(red = 1,green = 0.5,blue = 0.1,alpha = 0.6), breaks = 15, add = TRUE, probability = TRUE);legend("topright", legend = c("men","women"), lty=c(1,1), lwd = 2, col=c("blue","orange"))
mean.men <- mean(weight.men, na.rm = TRUE)
mean.women <- mean(weight.women, na.rm = TRUE)
#
hist(weight.men, col = rgb(red = 0,green = 0.5,blue = 1,alpha = 0.9), breaks = 15, main = "Histogram of weight", xlab = "Weight", probability = TRUE);hist(weight.women, col = rgb(red = 1,green = 0.5,blue = 0.1,alpha = 0.6), breaks = 15, add = TRUE, probability = TRUE);abline(v=c(mean.men,mean.women),lty=c(3,3),col=c("blue","orange"),lwd = 3);legend("topright", legend = c("men","women"), lty=c(1,1), lwd = 2, col=c("blue","orange"))
bars = c(103,103,97,102.5,100.5,103,101.3,99.5,101,104) # weights of 10 chocolate bars
chocbar.mean = 100 # expected weight
t.test(x = bars, mu = chocbar.mean, alternative = "two.sided")
# equivalent to:
# t.test(bars,mu = chocbar.mean)
# "alternative" is set to "two.sided" per default.
# x is a vector containing the data values
# mu indicates the true value of the mean (here: 100g)
t.test(weight.men, mu = 180, alternative = "less")
hist(weight.men, col = rgb(red = 0,green = 0.5,blue = 1,alpha = 0.9), breaks = 15, main = "Histogram of weight", xlab = "Weight", probability = TRUE);hist(weight.women, col = rgb(red = 1,green = 0.5,blue = 0.1,alpha = 0.6), breaks = 15, add = TRUE, probability = TRUE);abline(v=c(mean.men,mean.women),lty=c(3,3),col=c("blue","darkorange"),lwd = 3);legend("topright", legend = c("men","women"), lty=c(1,1), lwd = 2, col=c("blue","orange"))
t.test(weight.men, weight.women)
# remember, alternative = "two.sided" per default.
t.test(weight.men,weight.women, alternative = "greater")
# p-value of the two-sided t-test versus p-value of the one-sided t-test:
t.test(weight.men,weight.women, alternative = "two.sided")$p.value # two-tailed
t.test(weight.men,weight.women, alternative = "greater")$p.value # one-tailed
# divide the one by the other and see ...
# No need to understand this code - just look at the graph and shaded areas.
x = seq(-5,5,by=0.01)
y = dt(x,df=372.45)
z = dt(seq(1.84,5,0.01),df=372.45)
plot(x,y,type='l',lwd=3);abline(v = 1.8453, lwd=2,col='blue',lty=3);polygon(c(x[x>=1.84], max(x), 1.84), c(y[x>=1.84], 0, 0), col = rgb(0.78, 0.3, 1, alpha = 0.8))
# No need to understand this code - just look at the graph and shaded areas.
x = seq(-5,5,by=0.01)
y = dt(x,df=372.45)
plot(x,y,type='l',lwd=3);abline(v = c(-1.8453,1.8453), lwd=2,col='blue',lty=3);polygon(c(x[x>=1.84], max(x), 1.84), c(y[x>=1.84], 0, 0), col = rgb(0.78, 0.3, 1, alpha = 0.8));polygon(c(min(x),x[x<=-1.84], min(x)), c(y[x<=-1.84], 0, 0), col = rgb(0.78, 0.3, 1, alpha = 0.8))
hist(dat$height[rows.men], col = rgb(red = 0,green = 0.5,blue = 1,alpha = 0.9), breaks = 20, main = "Histogram of height", xlab = "Height", probability = TRUE);
hist(dat$height[rows.women], col = rgb(red = 1,green = 0.5,blue = 0.1,alpha = 0.6), breaks = 20, add = TRUE, probability = TRUE);
abline(v=c(mean(dat$height[rows.men], na.rm =TRUE),mean(dat$height[rows.women],na.rm = TRUE)),
lty=c(3,3),col=c("blue","darkorange"),lwd = 3);
legend("topright", legend = c("men","women"), lty=c(1,1), lwd = 2, col=c("blue","orange"))
# H1 the expected value of the random variable "Height of men" is equal oder lower that the expected value of the random variable "Height of woman"
# H0 the expected value of the random variable "Height of men" is greater that the expected value of the random variable "Height of woman"
men.height = dat$height[rows.men]
women.height = dat$height[rows.women]
t.test(men.height,women.height, alternative = "greater")
mean(dat$age[rows.men])
#1 Mean age of Men
mean(dat$age[rows.men])
# --> < 50
#H0 the mean age of men is significantly greater or equal 50
#H1 the mean age of men is significantly less than 50
age.men = dat$age[rows.men]
t.test(x = age.men, mu = 50,alternative = "less")
unique(dat$location)
unique(dat$location)
which(dat$location,Buckingham = TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
lapply(dat.num,mean)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
lapply(dat.num,mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = sapply(dat.num$[patients.buckingham],mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = lapply(dat.num$[patients.buckingham],mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = sapply(dat.num$patients.buckingham,mean, na.rm =TRUE)
means.louisa = sapply(dat.num$patients.louisa,mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = sapply(dat.num$patients.buckingham,mean, na.rm =TRUE)
means.louisa = sapply(dat.num$patients.louisa,mean, na.rm =TRUE)
means.buckingham
means.louisa
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = lapply(dat.num$patients.buckingham,mean, na.rm =TRUE)
means.louisa = lapply(dat.num$patients.louisa,mean, na.rm =TRUE)
means.buckingham
means.louisa
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = lapply(dat.num$patients.buckingham,mean, na.rm =TRUE)
means.louisa = lapply(dat.num$patients.louisa,mean, na.rm =TRUE)
head(means.buckingham)
means.louisa
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = lapply(dat.num$location[patients.buckingham],mean, na.rm =TRUE)
means.louisa = lapply(dat.num$location[patients.louisa],mean, na.rm =TRUE)
means.buckingham
means.louisa
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = sapply(dat.num$location[patients.buckingham],mean, na.rm =TRUE)
means.louisa = sapply(dat.num$location[patients.louisa],mean, na.rm =TRUE)
means.buckingham
means.louisa
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
sapply(dat.num[patients.buckingham],mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
sapply(dat.num[patients.buckingham],mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
#H0 the mean weight of patients in buckingham is significantly lower or equal than the weiht of patients in louisa
#H1 the mean weight of patients in buckingham is significantly greater than the weiht of patients in louisa
t.test(means.buckingham$weight,means.louisa$weight, alterntive = "greater")
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
#H0 the mean weight of patients in buckingham is significantly lower or equal than the weiht of patients in louisa
#H1 the mean weight of patients in buckingham is significantly greater than the weiht of patients in louisa
t.test(means.buckingham[,weight],means.louisa[,weight], alterntive = "greater")
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
#H0 the mean weight of patients in buckingham is significantly lower or equal than the weiht of patients in louisa
#H1 the mean weight of patients in buckingham is significantly greater than the weiht of patients in louisa
t.test(means.buckingham['weight'],means.louisa['weight'], alterntive = "greater")
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
#H0 the mean weight of patients in buckingham is significantly lower or equal than the weiht of patients in louisa
#H1 the mean weight of patients in buckingham is significantly greater than the weiht of patients in louisa
t.test(dat.num$weight[patients.buckingham,],dat.num$weight[patients.louisa,], alterntive = "greater")
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
#H0 the mean weight of patients in buckingham is significantly lower or equal than the weiht of patients in louisa
#H1 the mean weight of patients in buckingham is significantly greater than the weiht of patients in louisa
weight.buckingham = dat.num$weight[patients.buckingham,]
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
#H0 the mean weight of patients in buckingham is significantly lower or equal than the weiht of patients in louisa
#H1 the mean weight of patients in buckingham is significantly greater than the weiht of patients in louisa
weight.buckingham = dat.num$weight[patients.buckingham]
weight.louisa = dat.num$weight[patients.louisa]
t.test(weight.buckingham,weight.louisa, alterntive = "greater")
# Check the normality of the distribution using a QQ-plot (Reminder)
qqnorm(dat$weight,main="weight"); qqline(dat$weight)
#
# Perform a Shapiro-Wilk test
shapiro.test(dat$weight)
# extract the p-value
shapiro.test(dat$weight)$p.value
# Reminder: for p-value >= 0.05, the data is normally distributed. For p-value < 0.05, the data is not normally distributed.
num.dat <- dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)] #create a dataframe containing only numeric columns
sapply(num.dat,shapiro.test) # apply the Shapiro-Wilk test on every column of "num.dat"
qqnorm(dat$bp.1d,main="Blood pressure"); qqline(dat$bp.1d)
boxplot(list(dat$bp.1d[rows.men],dat$bp.1d[rows.women]),main="bp.1d values", names = c("men","women"))
t.test(dat$bp.1d[rows.men],dat$bp.1d[rows.women], alternative = "two.sided")
# The observed t-statistics is:
t.obs = t.test(dat$bp.1d[rows.men],dat$bp.1d[rows.women], alternative = "two.sided")$statistic
tmp = read.table('https://www.dropbox.com/s/zviurze7c85quyw/diabetes_full.csv?dl=1',header=TRUE,sep="\t")
dat = tmp[,c(2,3,4,6,8,10,11,13,14,17,18)]
head(dat)
# Determine which patients have at least 1 NA
i.na <- which( apply(dat, 1, function(x) {sum(is.na(x)) >0 }) )
# alternative: i.na <- which( apply(dat, 1, function(x) {sum(is.na(x))}) >0 )
i.na
# Select the patients without NAs
dat = dat[-i.na,]
apply(dat, 1, function(x) {sum(is.na(x)) >0 })
# Determine which patients have at least 1 NA
i.na <- which( apply(dat, 1, function(x) {sum(is.na(x)) >0 }) )
# alternative: i.na <- which( apply(dat, 1, function(x) {sum(is.na(x))}) >0 )
# Select the patients without NAs
dat = dat[-i.na,]
# Plot variable correlation scatterplots for all variables.
pairs(dat,col='red', pch=20, cex = 0.5)
library(knitr)
library(rmdformats)
## Global options
options(max.print="120")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=120)
opts_knit$set(root.dir = "~/")
tmp = read.table('https://www.dropbox.com/s/zviurze7c85quyw/diabetes_full.csv?dl=1',header=TRUE,sep="\t")
dat = tmp[,c(2,3,4,6,8,10,11,13,14,17,18)]
head(dat)
# Determine which patients have at least 1 NA
i.na <- which( apply(dat, 1, function(x) {sum(is.na(x)) >0 }) )
# alternative: i.na <- which( apply(dat, 1, function(x) {sum(is.na(x))}) >0 )
# Select the patients without NAs
dat = dat[-i.na,]
# Plot variable correlation scatterplots for all variables.
pairs(dat,col='red', pch=20, cex = 0.5)
cor = cor(dat)
cor
#
library(pheatmap)
pheatmap(cor,
cluster_cols = FALSE,
cluster_rows = FALSE,
display_numbers = TRUE)
cor = cor(dat)
View(cor)
#
library(pheatmap)
pheatmap(cor,
cluster_cols = FALSE,
cluster_rows = FALSE,
display_numbers = TRUE)
cor = cor(dat)
#
library(pheatmap)
pheatmap(cor,
cluster_cols = FALSE,
cluster_rows = FALSE,
display_numbers = TRUE)
## compute correlation
cor(dat$stab.glu,dat$hip)
##
## test for significance
cor.test(dat$stab.glu,dat$hip)
l.g = lm(chol ~ glyhb, data=dat)
summary(l.g)
l.g = lm(chol ~ glyhb, data=dat)
summary(l.g)
l.g
l.g = lm(chol ~ glyhb, data=dat)
summary(l.g)
# normal distribution of residuals?
hist(l.g$residuals,breaks=20)
##
qqnorm(l.g$residuals);qqline(l.g$residuals)
##
## correlation residuals x-values?
cor(dat$glyhb,l.g$residuals)
plot(dat$glyhb,l.g$residuals,pch=20)
plot(dat$chol,l.g$fitted.values,pch=20,col='blue', xlab='Real values',ylab='Predicted values');abline(0,1,col='red')
l.all = lm(chol ~ .,data=dat)
summary(l.all)
l.less = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat)
summary(l.less)
plot(dat$chol,l.less$fitted.values,pch=20,col='blue', xlab='Real values',ylab='Predicted values');abline(0,1,col='red')
n = nrow(dat)
rmse = sqrt(1/n*sum(l.less$residuals^2))
rmse
##
## take 200 random patients to form the training set
i.train = sample (1:nrow(dat),200)
##
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n.train = nrow(dat.train)
rmse.train = sqrt(1/n.train*sum(l.train$residuals^2))
rmse.train
pred = predict(l.train,newdata = dat.test)
pred = predict(l.train,newdata = dat.test)
pred
pred = predict(l.train,newdata = dat.test)
pred = predict(l.train,newdata = dat.test)
n.test = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n.test*sum(residuals^2))
rmse.test
set.seed(345)
RMSE <- sapply(1:10, function(x) {
i.train = sample (1:nrow(dat),200)
##
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
##
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
##
n.train = nrow(dat.train)
rmse.train = sqrt(1/n.train*sum(l.train$residuals^2))
##
pred = predict(l.train,newdata = dat.test)
##
n.test = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n.test*sum(residuals^2))
RMSE <- c(rmse.train,rmse.test)
RMSE
})
#
#
plot(RMSE[1,], pch = 19, col = "orange", xlab = "Iteration", ylab = "RMSE values", ylim = c(min(RMSE),max(RMSE)+2));points(RMSE[2,], pch = 19, col = "purple");legend("topright", legend = c("rmse.train", "rmse.test"), col = c("orange","purple"), pch = c(19,19));abline(h = mean(RMSE[1,]), lty = 2, col = "orange");abline(h = mean(RMSE[2,]), lty = 2, col = "purple")
# remove the first column as this is the output variable
pca = prcomp(dat[,-1]) # col 1 = "chol"
summary(pca)
par(las=2);barplot(pca$rotation[,1],horiz=TRUE,main='PC1',col='red')
cor.pca <- cor(pca$x)
pheatmap(cor.pca,
cluster_cols = FALSE,
cluster_rows = FALSE,
display_numbers = TRUE)
l.pca = lm(dat$chol ~ pca$x)
summary(l.pca)
par(mfrow=c(3,2),mar=c(2,4,2,2))
barplot(pca$rotation[,1],horiz=TRUE,main='PC1',col='red');barplot(pca$rotation[,3],horiz=TRUE,main='PC3',col='red');barplot(pca$rotation[,4],horiz=TRUE,main='PC4',col='red');barplot(pca$rotation[,5],horiz=TRUE,main='PC5',col='red');barplot(pca$rotation[,6],horiz=TRUE,main='PC6',col='red');barplot(pca$rotation[,10],horiz=TRUE,main='PC10',col='red')
l.glyhb = lm(glyhb ~ .,data=dat)
summary(l.glyhb)
#
pca.glyhb = prcomp(dat[,-4]) # col 4 = "glyhb"
summary(pca.glyhb)
#
cor.pca.glyhb <- cor(pca.glyhb$x)
pheatmap(cor.pca.glyhb,
cluster_cols = FALSE,
cluster_rows = FALSE,
display_numbers = TRUE)
#
l.pca.glyhb = lm(dat$glyhb ~ pca.glyhb$x)
summary(l.pca.glyhb)
#
layout(matrix(c(1:3)))
par(las=2, cex=1);barplot(pca.glyhb$rotation[,1],horiz=TRUE,main='PC1',col='red');barplot(pca.glyhb$rotation[,3],horiz=TRUE,main='PC3',col='red');barplot(pca.glyhb$rotation[,5],horiz=TRUE,main='PC5',col='red')
#
setwd("~/Desktop/BioInfoprojekt/2025-topic-03-group-02")
knitr::opts_chunk$set(echo = TRUE)
nrow(MS_Table) # Number of Proteins
ncol(MS_Table) # Number of varibale
unique(sapply(MS_Table, class)) # classification of variables
any(is.na(MS_Table)) # missing values
min(MS_Table) # minimum intensity
max(MS_Table) # maximum intensity
