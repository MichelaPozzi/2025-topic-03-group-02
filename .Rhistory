lapply(dat.num,mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = sapply(dat.num$[patients.buckingham],mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = lapply(dat.num$[patients.buckingham],mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = sapply(dat.num$patients.buckingham,mean, na.rm =TRUE)
means.louisa = sapply(dat.num$patients.louisa,mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = sapply(dat.num$patients.buckingham,mean, na.rm =TRUE)
means.louisa = sapply(dat.num$patients.louisa,mean, na.rm =TRUE)
means.buckingham
means.louisa
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = lapply(dat.num$patients.buckingham,mean, na.rm =TRUE)
means.louisa = lapply(dat.num$patients.louisa,mean, na.rm =TRUE)
means.buckingham
means.louisa
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = lapply(dat.num$patients.buckingham,mean, na.rm =TRUE)
means.louisa = lapply(dat.num$patients.louisa,mean, na.rm =TRUE)
head(means.buckingham)
means.louisa
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = lapply(dat.num$location[patients.buckingham],mean, na.rm =TRUE)
means.louisa = lapply(dat.num$location[patients.louisa],mean, na.rm =TRUE)
means.buckingham
means.louisa
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
means.buckingham = sapply(dat.num$location[patients.buckingham],mean, na.rm =TRUE)
means.louisa = sapply(dat.num$location[patients.louisa],mean, na.rm =TRUE)
means.buckingham
means.louisa
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = data.frame(dat[c(2,3,4,5,6,8,10,11,13,14,17,18)])
head(dat.num)
sapply(dat.num[patients.buckingham],mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
sapply(dat.num[patients.buckingham],mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
#H0 the mean weight of patients in buckingham is significantly lower or equal than the weiht of patients in louisa
#H1 the mean weight of patients in buckingham is significantly greater than the weiht of patients in louisa
t.test(means.buckingham$weight,means.louisa$weight, alterntive = "greater")
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
#H0 the mean weight of patients in buckingham is significantly lower or equal than the weiht of patients in louisa
#H1 the mean weight of patients in buckingham is significantly greater than the weiht of patients in louisa
t.test(means.buckingham[,weight],means.louisa[,weight], alterntive = "greater")
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
#H0 the mean weight of patients in buckingham is significantly lower or equal than the weiht of patients in louisa
#H1 the mean weight of patients in buckingham is significantly greater than the weiht of patients in louisa
t.test(means.buckingham['weight'],means.louisa['weight'], alterntive = "greater")
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
#H0 the mean weight of patients in buckingham is significantly lower or equal than the weiht of patients in louisa
#H1 the mean weight of patients in buckingham is significantly greater than the weiht of patients in louisa
t.test(dat.num$weight[patients.buckingham,],dat.num$weight[patients.louisa,], alterntive = "greater")
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
#H0 the mean weight of patients in buckingham is significantly lower or equal than the weiht of patients in louisa
#H1 the mean weight of patients in buckingham is significantly greater than the weiht of patients in louisa
weight.buckingham = dat.num$weight[patients.buckingham,]
unique(dat$location)
patients.buckingham = which(dat$location == 'Buckingham')
patients.louisa = which(dat$location == 'Louisa')
dat.num = dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)]
head(dat.num)
means.buckingham =sapply(dat.num[patients.buckingham,],mean, na.rm =TRUE)
means.louisa = sapply(dat.num[patients.louisa,],mean, na.rm =TRUE)
means.buckingham
means.louisa
plot(means.buckingham,means.louisa)
#H0 the mean weight of patients in buckingham is significantly lower or equal than the weiht of patients in louisa
#H1 the mean weight of patients in buckingham is significantly greater than the weiht of patients in louisa
weight.buckingham = dat.num$weight[patients.buckingham]
weight.louisa = dat.num$weight[patients.louisa]
t.test(weight.buckingham,weight.louisa, alterntive = "greater")
# Check the normality of the distribution using a QQ-plot (Reminder)
qqnorm(dat$weight,main="weight"); qqline(dat$weight)
#
# Perform a Shapiro-Wilk test
shapiro.test(dat$weight)
# extract the p-value
shapiro.test(dat$weight)$p.value
# Reminder: for p-value >= 0.05, the data is normally distributed. For p-value < 0.05, the data is not normally distributed.
num.dat <- dat[,c(2,3,4,5,6,8,10,11,13,14,17,18)] #create a dataframe containing only numeric columns
sapply(num.dat,shapiro.test) # apply the Shapiro-Wilk test on every column of "num.dat"
qqnorm(dat$bp.1d,main="Blood pressure"); qqline(dat$bp.1d)
boxplot(list(dat$bp.1d[rows.men],dat$bp.1d[rows.women]),main="bp.1d values", names = c("men","women"))
t.test(dat$bp.1d[rows.men],dat$bp.1d[rows.women], alternative = "two.sided")
# The observed t-statistics is:
t.obs = t.test(dat$bp.1d[rows.men],dat$bp.1d[rows.women], alternative = "two.sided")$statistic
tmp = read.table('https://www.dropbox.com/s/zviurze7c85quyw/diabetes_full.csv?dl=1',header=TRUE,sep="\t")
dat = tmp[,c(2,3,4,6,8,10,11,13,14,17,18)]
head(dat)
# Determine which patients have at least 1 NA
i.na <- which( apply(dat, 1, function(x) {sum(is.na(x)) >0 }) )
# alternative: i.na <- which( apply(dat, 1, function(x) {sum(is.na(x))}) >0 )
i.na
# Select the patients without NAs
dat = dat[-i.na,]
apply(dat, 1, function(x) {sum(is.na(x)) >0 })
# Determine which patients have at least 1 NA
i.na <- which( apply(dat, 1, function(x) {sum(is.na(x)) >0 }) )
# alternative: i.na <- which( apply(dat, 1, function(x) {sum(is.na(x))}) >0 )
# Select the patients without NAs
dat = dat[-i.na,]
# Plot variable correlation scatterplots for all variables.
pairs(dat,col='red', pch=20, cex = 0.5)
library(knitr)
library(rmdformats)
## Global options
options(max.print="120")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=120)
opts_knit$set(root.dir = "~/")
tmp = read.table('https://www.dropbox.com/s/zviurze7c85quyw/diabetes_full.csv?dl=1',header=TRUE,sep="\t")
dat = tmp[,c(2,3,4,6,8,10,11,13,14,17,18)]
head(dat)
# Determine which patients have at least 1 NA
i.na <- which( apply(dat, 1, function(x) {sum(is.na(x)) >0 }) )
# alternative: i.na <- which( apply(dat, 1, function(x) {sum(is.na(x))}) >0 )
# Select the patients without NAs
dat = dat[-i.na,]
# Plot variable correlation scatterplots for all variables.
pairs(dat,col='red', pch=20, cex = 0.5)
cor = cor(dat)
cor
#
library(pheatmap)
pheatmap(cor,
cluster_cols = FALSE,
cluster_rows = FALSE,
display_numbers = TRUE)
cor = cor(dat)
View(cor)
#
library(pheatmap)
pheatmap(cor,
cluster_cols = FALSE,
cluster_rows = FALSE,
display_numbers = TRUE)
cor = cor(dat)
#
library(pheatmap)
pheatmap(cor,
cluster_cols = FALSE,
cluster_rows = FALSE,
display_numbers = TRUE)
## compute correlation
cor(dat$stab.glu,dat$hip)
##
## test for significance
cor.test(dat$stab.glu,dat$hip)
l.g = lm(chol ~ glyhb, data=dat)
summary(l.g)
l.g = lm(chol ~ glyhb, data=dat)
summary(l.g)
l.g
l.g = lm(chol ~ glyhb, data=dat)
summary(l.g)
# normal distribution of residuals?
hist(l.g$residuals,breaks=20)
##
qqnorm(l.g$residuals);qqline(l.g$residuals)
##
## correlation residuals x-values?
cor(dat$glyhb,l.g$residuals)
plot(dat$glyhb,l.g$residuals,pch=20)
plot(dat$chol,l.g$fitted.values,pch=20,col='blue', xlab='Real values',ylab='Predicted values');abline(0,1,col='red')
l.all = lm(chol ~ .,data=dat)
summary(l.all)
l.less = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat)
summary(l.less)
plot(dat$chol,l.less$fitted.values,pch=20,col='blue', xlab='Real values',ylab='Predicted values');abline(0,1,col='red')
n = nrow(dat)
rmse = sqrt(1/n*sum(l.less$residuals^2))
rmse
##
## take 200 random patients to form the training set
i.train = sample (1:nrow(dat),200)
##
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n.train = nrow(dat.train)
rmse.train = sqrt(1/n.train*sum(l.train$residuals^2))
rmse.train
pred = predict(l.train,newdata = dat.test)
pred = predict(l.train,newdata = dat.test)
pred
pred = predict(l.train,newdata = dat.test)
pred = predict(l.train,newdata = dat.test)
n.test = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n.test*sum(residuals^2))
rmse.test
set.seed(345)
RMSE <- sapply(1:10, function(x) {
i.train = sample (1:nrow(dat),200)
##
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
##
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
##
n.train = nrow(dat.train)
rmse.train = sqrt(1/n.train*sum(l.train$residuals^2))
##
pred = predict(l.train,newdata = dat.test)
##
n.test = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n.test*sum(residuals^2))
RMSE <- c(rmse.train,rmse.test)
RMSE
})
#
#
plot(RMSE[1,], pch = 19, col = "orange", xlab = "Iteration", ylab = "RMSE values", ylim = c(min(RMSE),max(RMSE)+2));points(RMSE[2,], pch = 19, col = "purple");legend("topright", legend = c("rmse.train", "rmse.test"), col = c("orange","purple"), pch = c(19,19));abline(h = mean(RMSE[1,]), lty = 2, col = "orange");abline(h = mean(RMSE[2,]), lty = 2, col = "purple")
# remove the first column as this is the output variable
pca = prcomp(dat[,-1]) # col 1 = "chol"
summary(pca)
par(las=2);barplot(pca$rotation[,1],horiz=TRUE,main='PC1',col='red')
cor.pca <- cor(pca$x)
pheatmap(cor.pca,
cluster_cols = FALSE,
cluster_rows = FALSE,
display_numbers = TRUE)
l.pca = lm(dat$chol ~ pca$x)
summary(l.pca)
par(mfrow=c(3,2),mar=c(2,4,2,2))
barplot(pca$rotation[,1],horiz=TRUE,main='PC1',col='red');barplot(pca$rotation[,3],horiz=TRUE,main='PC3',col='red');barplot(pca$rotation[,4],horiz=TRUE,main='PC4',col='red');barplot(pca$rotation[,5],horiz=TRUE,main='PC5',col='red');barplot(pca$rotation[,6],horiz=TRUE,main='PC6',col='red');barplot(pca$rotation[,10],horiz=TRUE,main='PC10',col='red')
l.glyhb = lm(glyhb ~ .,data=dat)
summary(l.glyhb)
#
pca.glyhb = prcomp(dat[,-4]) # col 4 = "glyhb"
summary(pca.glyhb)
#
cor.pca.glyhb <- cor(pca.glyhb$x)
pheatmap(cor.pca.glyhb,
cluster_cols = FALSE,
cluster_rows = FALSE,
display_numbers = TRUE)
#
l.pca.glyhb = lm(dat$glyhb ~ pca.glyhb$x)
summary(l.pca.glyhb)
#
layout(matrix(c(1:3)))
par(las=2, cex=1);barplot(pca.glyhb$rotation[,1],horiz=TRUE,main='PC1',col='red');barplot(pca.glyhb$rotation[,3],horiz=TRUE,main='PC3',col='red');barplot(pca.glyhb$rotation[,5],horiz=TRUE,main='PC5',col='red')
#
setwd("~/Desktop/BioInfoprojekt/2025-topic-03-group-02")
knitr::opts_chunk$set(echo = TRUE)
nrow(MS_Table) # Number of Proteins
ncol(MS_Table) # Number of varibale
unique(sapply(MS_Table, class)) # classification of variables
any(is.na(MS_Table)) # missing values
min(MS_Table) # minimum intensity
max(MS_Table) # maximum intensity
knitr::opts_chunk$set(echo = TRUE)
MS_Table <- read.table("RDeeP_HeLa_Mitosis.csv", header = TRUE, row.names = 1, sep = ";")
n_rows = nrow(MS_Table)
n_rows # Number of Proteins
n_cols = ncol(MS_Table)
n_cols # Number of varibale
unique(sapply(MS_Table, class)) # classification of variables
any(is.na(MS_Table)) # missing values
min(MS_Table) # minimum intensity
max(MS_Table) # maximum intensity
treatment <- factor(rep(c("Ctrl", "RNAse"), each = 3, length.out = 150))
replicate <- factor(rep(c("Ctrl_Rep1", "Ctrl_Rep2", "Ctrl_Rep3", "RNAse_Rep1","RNAse_Rep2", "RNAse_Rep3"),25))
fraction <- factor(rep(paste0("Fraction_", 1:25), each = 6))
data <- data.frame(rownames = colnames(MS_Table),treatment = treatment, replicate = replicate, fraction = fraction)
data
average.list <- list() #create list
# for loop, going through all fractions:
# selecting Ctrl columns for specific fraction
# computing average of these columns
# adding a new vector to list e.g."Ctrl_Fraction_1" and assigning average values
for (f in levels(fraction)) {
cols.Ctrl <- which(fraction == f & treatment == "Ctrl")
average.Ctrl <- rowMeans(MS_Table[,cols.Ctrl])
average.list[[paste0("Ctrl_",f)]] <- average.Ctrl # paste0 funktion checken
cols.RNAse <- which(fraction == f & treatment == "RNAse")
average.RNAse <- rowMeans(MS_Table[,cols.RNAse])
average.list[[paste0("RNAse_",f)]] <- average.RNAse
}
MS_Table_Averages <- as.data.frame(average.list) #convert list to dataframe
rownames(MS_Table_Averages) <- rownames(MS_Table) #assign Protein IDs to average values
#Define new order of columns ("levels" works in alphabetic order, not useful for us)
fractions <- paste0("Fraction_", 1:25)
ordered_names <- as.vector(rbind(
paste0("Ctrl_", fractions),
paste0("RNAse_", fractions)
))
MS_Table_Averages <- MS_Table_Averages[, ordered_names]
head(MS_Table_Averages)
# Split up Control and RNAse values
ctrl_cols <- grep("^Ctrl_", colnames(MS_Table_Averages)) # grep function genauer schauen
rnase_cols <- grep("^RNAse_", colnames(MS_Table_Averages))
# Normalization of each group to 100
ctrl_norm <- MS_Table_Averages[, ctrl_cols] / rowSums(MS_Table_Averages[, ctrl_cols]) * 100
rnase_norm <- MS_Table_Averages[, rnase_cols] / rowSums(MS_Table_Averages[, rnase_cols]) * 100
# Combine in one table
MS_Table_Norm <- cbind(ctrl_norm, rnase_norm)
MS_Table_Norm <- MS_Table_Norm[, colnames(MS_Table_Averages)]
head(round(MS_Table_Norm, 2))
# Verify the calculation with one example; the row sum should be ~200 (Ctrl 100% + RNAse 100%)
rowSums(MS_Table_Norm["1433B_HUMAN", ])
knitr::opts_chunk$set(echo = TRUE)
MS_Table <- read.table("RDeeP_HeLa_Mitosis.csv", header = TRUE, row.names = 1, sep = ";")
n_rows = nrow(MS_Table)
n_rows # Number of Proteins
n_cols = ncol(MS_Table)
n_cols # Number of varibale
unique(sapply(MS_Table, class)) # classification of variables
any(is.na(MS_Table)) # missing values
min(MS_Table) # minimum intensity
max(MS_Table) # maximum intensity
treatment <- factor(rep(c("Ctrl", "RNAse"), each = 3, length.out = 150))
replicate <- factor(rep(c("Ctrl_Rep1", "Ctrl_Rep2", "Ctrl_Rep3", "RNAse_Rep1","RNAse_Rep2", "RNAse_Rep3"),25))
fraction <- factor(rep(paste0("Fraction_", 1:25), each = 6))
data <- data.frame(rownames = colnames(MS_Table),treatment = treatment, replicate = replicate, fraction = fraction)
data
average.list <- list() #create list
# for loop, going through all fractions:
# selecting Ctrl columns for specific fraction
# computing average of these columns
# adding a new vector to list e.g."Ctrl_Fraction_1" and assigning average values
for (f in levels(fraction)) {
cols.Ctrl <- which(fraction == f & treatment == "Ctrl")
average.Ctrl <- rowMeans(MS_Table[,cols.Ctrl])
average.list[[paste0("Ctrl_",f)]] <- average.Ctrl # paste0 funktion checken
cols.RNAse <- which(fraction == f & treatment == "RNAse")
average.RNAse <- rowMeans(MS_Table[,cols.RNAse])
average.list[[paste0("RNAse_",f)]] <- average.RNAse
}
MS_Table_Averages <- as.data.frame(average.list) #convert list to dataframe
rownames(MS_Table_Averages) <- rownames(MS_Table) #assign Protein IDs to average values
#Define new order of columns ("levels" works in alphabetic order, not useful for us)
fractions <- paste0("Fraction_", 1:25)
ordered_names <- as.vector(rbind(
paste0("Ctrl_", fractions),
paste0("RNAse_", fractions)
))
MS_Table_Averages <- MS_Table_Averages[, ordered_names]
head(MS_Table_Averages)
# Split up Control and RNAse values
ctrl_cols <- grep("^Ctrl_", colnames(MS_Table_Averages)) # grep function genauer schauen
rnase_cols <- grep("^RNAse_", colnames(MS_Table_Averages))
# Normalization of each group to 100
ctrl_norm <- MS_Table_Averages[, ctrl_cols] / rowSums(MS_Table_Averages[, ctrl_cols]) * 100
rnase_norm <- MS_Table_Averages[, rnase_cols] / rowSums(MS_Table_Averages[, rnase_cols]) * 100
# Combine in one table
MS_Table_Norm <- cbind(ctrl_norm, rnase_norm)
MS_Table_Norm <- MS_Table_Norm[, colnames(MS_Table_Averages)]
head(round(MS_Table_Norm, 2))
# Verify the calculation with one example; the row sum should be ~200 (Ctrl 100% + RNAse 100%)
rowSums(MS_Table_Norm["1433B_HUMAN", ])
# Choose your protein of interest
protein_name <- "1433G_HUMAN"
# Extract abundance values (they are in the row named "1433B_HUMAN")
abundance_values <- as.numeric(MS_Table[protein_name, ])
# Add them to the metadata table
data$abundance <- abundance_values
data
# create empty vectors to store the values
sd_values <- numeric(25)
mean_values <- numeric(25)
# create loop for all 25 fractions
for (i in 1:25) {
# Define replicate labels ( RNAse or Ctrl)
reps <- paste0("RNAse_Rep", 1:3)
# Filter just the current fraction and replicates
subset_data <- data[data$fraction == paste0("Fraction_", i) & data$replicate %in% reps, ]
# Extract abundance values
values <- subset_data$abundance
# Compute standard deviation + compute mean
sd_values[i] <- sd(values)
mean_values[i] <- mean(values)
}
# Create result table
result_tablesd <- data.frame(
Fraction = paste0("Fraction_", 1:25),
SD = sd_values
)
result_tablesd
result_tablemean <- data.frame(
Fraction = paste0("Fraction_", 1:25),
MEAN = mean_values
)
result_tablemean
# code for a barplot
# Combine by 'fraction' column
result_table <- merge(result_tablesd, result_tablemean, by = "Fraction")
# Optional: rename for clarity
colnames(result_table) <- c("Fraction", "Mean", "SD")
# Sort fractions numerically
result_table$Fraction_num <- as.numeric(gsub("Fraction_", "", result_table$Fraction))
result_table <- result_table[order(result_table$Fraction_num), ]
# Plot bars and store bar positions
bar_positions <- barplot(result_table$Mean,
names.arg = result_table$Fraction,
las = 2,
col = "lightblue",
ylim = c(0, max(result_table$Mean + result_table$SD, na.rm = TRUE)),
main = "Mean Abundance per Fraction",
ylab = "Mean Abundance")
