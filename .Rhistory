# fractions = x
x <- 1:25
# empty vectors for results (with length of number of proteins)
CoM_Ctrl <- numeric(nrow(MS_Table_Norm))
CoM_RNase <- numeric(nrow(MS_Table_Norm))
shift_distance <- numeric(nrow(MS_Table_Norm))
shift_direction <- numeric(nrow(MS_Table_Norm))
# for loop over every protein
for (p in seq_len(nrow(MS_Table_Norm))) {
# extract values for Ctrl and RNase
row_vals <- as.numeric(MS_Table_Norm [p,])
ctrl_vals <- row_vals[seq(1, 50, by =2)]
rnase_vals <- row_vals[seq(2, 50, by=2)]
# calculate CoM, shift distance and shift direction
CoM_Ctrl[p] <- sum(ctrl_vals * x) / sum(ctrl_vals)
CoM_RNase[p] <- sum(rnase_vals * x) / sum(rnase_vals)
shift_distance[p] <- CoM_Ctrl[p] - CoM_RNase[p]
shift_direction[p] <- sign(shift_distance[p])
}
# store results in new dataframe
Shift_Data <- data.frame(
CoM_Ctrl = CoM_Ctrl,
CoM_RNase = CoM_RNase,
shift_distance = shift_distance,
shift_direction = shift_direction,
row.names = rownames(MS_Table_Norm))
head(Shift_Data)
#numer of proteins with shift based on average values (just for interesst, delete later)
sum(Shift_Data$shift_distance > 1, na.rm = TRUE)
# create empty columns for statistical test results
Shift_Data$shapiro_p <- NA
Shift_Data$normal_distributed <- NA
Shift_Data$p_value_ttest_filtered <- NA
Shift_Data$significant_ttest_filtered <- NA
# iterate over all proteins
for (protein in rownames(Shift_Data_for_t)) {
# extract shift distances for each replicate
shift_values <- as.numeric(Shift_Data_for_t[protein, c("shift_distance_rep1", "shift_distance_rep2", "shift_distance_rep3")])
# make sure that no NAs are present
if (all(!is.na(shift_values))) {
# check if all values are identical (no variance)
if (length(unique(shift_values)) == 1) {
# set normal distribution to TRUE if no variance is present
Shift_Data[protein, "shapiro_p"] <- NA
Shift_Data[protein, "normal_distributed"] <- TRUE
} else {
# perform Shapiro-Wilk test to check for normal distribution
shapiro_result <- shapiro.test(shift_values)
Shift_Data[protein, "shapiro_p"] <- shapiro_result$p.value
Shift_Data[protein, "normal_distributed"] <- shapiro_result$p.value >= 0.05
}
# perfrom one-sided t-test if data is normal distributed
if (Shift_Data[protein, "normal_distributed"] == TRUE) {
test_result <- t.test(shift_values, mu = 1, alternative = "greater")
Shift_Data[protein, "p_value_ttest_filtered"] <- test_result$p.value
Shift_Data[protein, "significant_ttest_filtered"] <- ifelse(test_result$p.value < 0.05, TRUE, FALSE)
} else {
# no t-test applied if data is not normal distributed
Shift_Data[protein, "p_value_ttest_filtered"] <- NA
Shift_Data[protein, "significant_ttest_filtered"] <- NA
}
}
}
# summary of proteins regarding normal distribution
table(Shift_Data$normal_distributed, useNA = "ifany")
# summary of proteins regarding significant of t-test
table(Shift_Data$significant_ttest_filtered, useNA = "ifany")
head(Shift_Data)
library(glue)
#loading list of uniprot RBPs (HUMAN)
uniprot_rbps <- read.delim("uniprotkb_RNA_binding_HUMAN_AND_model_o_2025_06_09.tsv", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
#comparison of uniprot RBPs with our T-Test positive RBPs
known_rbps <- uniprot_rbps$Entry.Name
t_test_positives <- rownames(Shift_Data[Shift_Data$significant_ttest_filtered == TRUE & !is.na(Shift_Data$significant_ttest_filtered), ])
overlap_MS_Table <- intersect(rownames(MS_Table), known_rbps)
overlap_t_test <- intersect(t_test_positives, known_rbps)
glue("Number of known RBPs in UniProt: {length(known_rbps)}")
glue("Number of UniProt RBPs tested with R-DeeP: {length(overlap_MS_Table)}")
glue("Number identified as RBPs (T-Test positive): {length(overlap_t_test)}")
glue("Hit rate: {round(length(overlap_t_test)/length(overlap_MS_Table)*100, 2)}%")
# validation of test using three listed positive and negative controls
# RBM10, SMN1 and FMR1 have been listed many times as RBPs (Quellen raussuchen)
pos_controls <- c("RBM10_HUMAN", "SMN_HUMAN", "FMR1_HUMAN")
pos_df <- data.frame(
Protein_Postive_Control = pos_controls,
InDataset = pos_controls %in% rownames(MS_Table),
TTest = pos_controls %in% t_test_positives)
print(pos_df)
# ATP5F1A, SDHB and COX4I1 are often used as negative controls(Quellen raussuchen)
neg_controls <- c("ACTB_HUMAN", "SDHB_HUMAN", "COX41_HUMAN")
neg_df <- data.frame(
Protein_Negative_Control = neg_controls,
InDataset = neg_controls %in% rownames(MS_Table),
TTest = neg_controls %in% t_test_positives)
print(neg_df)
not_indentfied <- !intersect(t_test_positives, known_rbps)
not_indentified <- t_test_positives[! t_test_positives %in% known_rbps & ! t_test_positives %in% rownames(MS_Table)]
length(not_indentified)
not_indentified <- t_test_positives[! t_test_positives %in% known_rbps]
length(not_indentified)
not_indentified <- t_test_positives[! t_test_positives %in% known_rbps & t_test_positives %in% overlap_MS_Table]
length(not_indentified)
not_indentified <- known_rbps[! known_rbps %in% t_test_positives & known_rbps %in% rownames(MS_Table)]
length(not_indentified)
### alle Uniprot Proteine die nicht gefunden wurden
not_indentified <- known_rbps[! known_rbps %in% t_test_positives & known_rbps %in% rownames(MS_Table)]
length(not_indentified)
head(not_indentified)
# Choos Protein
protein_of_interest <- "SRRM4_HUMANN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
# Choos Protein
protein_of_interest <- "RBY1B_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
# Choos Protein
protein_of_interest <- "FBLL1_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
# Choos Protein
protein_of_interest <- "SRRM4_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
# Choos Protein
protein_of_interest <- "DX39A_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
# Choos Protein
protein_of_interest <- "XPO1_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
# Choos Protein
protein_of_interest <- "SR140_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
### alle Uniprot Proteine die nicht gefunden wurden
not_indentified <- known_rbps[! known_rbps %in% t_test_positives & known_rbps %in% rownames(MS_Table)]
length(not_indentified)
head(not_indentified, 20)
# Choos Protein
protein_of_interest <- "SET1A_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
# Choos Protein
protein_of_interest <- "EIF3G_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
# Choos Protein
protein_of_interest <- "MCES_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
# Choos Protein
protein_of_interest <- "SYNJ1_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
# Choos Protein
protein_of_interest <- "IF4G3_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
# Choos Protein
protein_of_interest <- "HTSF1_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
# Choos Protein
protein_of_interest <- "CPSF5_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
# Choos Protein
protein_of_interest <- "CPSF5_HUMAN" # hier dein Protein einsetzen
# Extract protein data
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
# Store Ctrl and RNase Values
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
# Plot
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
plot_protein <- funktion(x) {
plot_protein <- function(x) {
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main=protein_of_interest
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
plot_protein <- function(x) {
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
plot_protein <- function(x) {
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
}
for (s in sample_not_identified ){
plot_protein(s)
}
### alle Uniprot Proteine die nicht gefunden wurden
not_indentified <- known_rbps[! known_rbps %in% t_test_positives & known_rbps %in% rownames(MS_Table)]
length(not_indentified)
sample_not_identified <- head(not_indentified, 20)
plot_protein <- function(x) {
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
}
for (s in sample_not_identified ){
plot_protein(s)
}
### alle Uniprot Proteine die nicht gefunden wurden
not_indentified <- known_rbps[! known_rbps %in% t_test_positives & known_rbps %in% rownames(MS_Table)]
length(not_indentified)
sample_not_identified <- head(not_indentified, 30)
plot_protein <- function(x) {
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
}
sample_not_identified <- head(not_indentified, 40)
for (s in sample_not_identified ){
plot_protein(s)
}
plot_protein <- function(x) {
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
}
sample_not_identified <- head(not_indentified, 40)
for (s in sample_not_identified ){
plot_protein(s)
}
for(s in sample_not_identified) {
Shift_Data_for_t[s,]
}
plot_protein <- function(x) {
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
}
sample_not_identified <- head(not_indentified, 40)
for (s in sample_not_identified ){
plot_protein(s)
}
for(s in sample_not_identified) {
print(Shift_Data_for_t[s,])
}
plot_protein <- function(x) {
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
}
sample_not_identified <- head(not_indentified, 40)
for (s in sample_not_identified ){
plot_protein(s)
}
print(Shift_Data_for_t[sample_not_identified,])
plot_protein <- function(x) {
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
}
sample_not_identified <- head(not_indentified, 40)
for (s in sample_not_identified ){
plot_protein(s)
}
print(Shift_Data_for_t[sample_not_identified,])
print(Shift_Data[sample_not_identified, c("shapiro_p","normal_distributed","p_value_ttest_filtered","significant_ttest_filtered")])
sum(Shift_Data[not_indentified, "shapiro_p" == NA])
sum(is.na(Shift_Data[not_identified, "shapiro_p"]))
### alle Uniprot Proteine die nicht gefunden wurden
not_indentified <- known_rbps[! known_rbps %in% t_test_positives & known_rbps %in% rownames(MS_Table)]
length(not_indentified)
sum(is.na(Shift_Data[not_identified, "shapiro_p"]))
um(is.na(Shift_Data[not_indentified, "shapiro_p"]))
sum(is.na(Shift_Data[not_indentified, "shapiro_p"]))
sum(Shift_Data[not_indentified, "normal_distributed"==FALSE])
sum(Shift_Data[not_identified, "normal_distributed"] == FALSE)
sum(Shift_Data[not_indentified, "normal_distributed"] == FALSE)
sum(Shift_Data[not_indentified, "p_value_ttest_filtered"] < 0.1)
sum(Shift_Data[not_indentified, "p_value_ttest_filtered"] < 0.1, na.rm = TRUE)
sum(Shift_Data[not_indentified, "p_value_ttest_filtered"] < 0.07, na.rm = TRUE)
sum(Shift_Data[not_indentified, "p_value_ttest_filtered"] < 0.06, na.rm = TRUE)
### alle Uniprot Proteine die nicht gefunden wurden
not_indentified <- known_rbps[! known_rbps %in% t_test_positives & known_rbps %in% rownames(MS_Table)]
length(not_indentified)
sum(is.na(Shift_Data[not_indentified, "shapiro_p"]))
sum(Shift_Data[not_indentified, "normal_distributed"] == FALSE)
sum(Shift_Data[not_indentified, "p_value_ttest_filtered"] < 0.1, na.rm = TRUE)
plot_protein <- function(x) {
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
plot(fractions, ctrl_values, type="o", pch=16, lty=1, col="green", ylim=range(c(ctrl_values, rnase_values)),
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest)
lines(fractions, rnase_values, type="o",pch =16, lty=1, col="red")
legend("topright", legend=c("Ctrl", "RNase"), col=c("green", "red"), lty=1, pch=16)
}
sample_not_identified <- head(not_indentified, 40)
for (s in sample_not_identified ){
plot_protein(s)
}
print(Shift_Data_for_t[sample_not_identified,])
print(Shift_Data[sample_not_identified, c("shapiro_p","normal_distributed","p_value_ttest_filtered","significant_ttest_filtered")])
print(MS_Table_Norm["RBY1b_HUMAN",])
print(MS_Table_Norm["RBY1B_HUMAN",])
df <- read.table("Table_HS_RBP.txt", header = TRUE, sep = "\t")
setwd("~/Desktop/BioInfoprojekt/2025-topic-03-group-02")
df_RBP2GO <- read.table("Table_HS_RBP.txt", header = TRUE, sep = "\t")
View(df_RBP2GO)
df_RBP2GO <- read.table("Table_HS_RBP.txt",
header = TRUE,
sep = "\t",
quote = "\"",
skip = 4,
check.names = FALSE)
df_RBP2GO <- read.table("Table_HS_RBP.txt",header = TRUE, sep = "\t", skip = 4)
df_RBP2GO <- read.table("Table_HS_RBP.txt",header = TRUE, sep = "\t", skip = 5)
df_RBP2GO <- read.table("Table_HS_RBP.txt",header = TRUE, sep = "\t",quote = "\"", skip = 5)
df_RBP2GO <- read.tsv("Table_HS_RBP.txt", skip = 5)
df_RBP2GO <- read_tsv("Table_HS_RBP.txt", skip = 5)
View(df_RBP2GO)
rm(df_RBP2GO)
print(protein_data("AKAP8_HUMAN",))
protein_data("AKAP8_HUMAN",)
protein_data[AKAP8_HUMAN",]
print(protein_data["AKAP8_HUMAN",])
print(protein_data$Entry == "AKAP8_HUMAN")
knitr::opts_chunk$set(echo = TRUE)
protein_data <- data.frame(
Entry = entry_names,
UniProtAccession = accession_ids,
MolecularWeight_kDa = masses_vec / 1000
)
