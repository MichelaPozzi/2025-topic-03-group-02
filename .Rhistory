shift_distance = shift_distance_NS,
shift_direction= shift_direction_NS,
row.names = rownames(MS_Table_Norm_NS))
# Normalisation of MS_Table_NS to 100
ctrl_cols_t1 <- grep("_Ctrl_Rep1", colnames(MS_Table_NS))
ctrl_cols_t2 <- grep("_Ctrl_Rep2", colnames(MS_Table_NS))
ctrl_cols_t3 <- grep("_Ctrl_Rep3", colnames(MS_Table_NS))
RNase_cols_t1 <- grep("_RNase_Rep1", colnames(MS_Table_NS))
RNase_cols_t2 <- grep("_RNase_Rep2", colnames(MS_Table_NS))
RNase_cols_t3 <- grep("_RNase_Rep3", colnames(MS_Table_NS))
ctrl_norm_t1 <- MS_Table_NS[, ctrl_cols_t1] / rowSums(MS_Table_NS[, ctrl_cols_t1]) * 100
ctrl_norm_t2 <- MS_Table_NS[, ctrl_cols_t2] / rowSums(MS_Table_NS[, ctrl_cols_t2]) * 100
ctrl_norm_t3 <- MS_Table_NS[, ctrl_cols_t3] / rowSums(MS_Table_NS[, ctrl_cols_t3]) * 100
RNase_norm_t1 <- MS_Table_NS[, RNase_cols_t1] / rowSums(MS_Table_NS[, RNase_cols_t1]) * 100
RNase_norm_t2 <- MS_Table_NS[, RNase_cols_t2] / rowSums(MS_Table_NS[, RNase_cols_t2]) * 100
RNase_norm_t3 <- MS_Table_NS[, RNase_cols_t3] / rowSums(MS_Table_NS[, RNase_cols_t3]) * 100
Norm_Data_for_t_NS <- cbind(ctrl_norm_t1, RNase_norm_t1, ctrl_norm_t2, RNase_norm_t2, ctrl_norm_t3, RNase_norm_t3)
fractions <- 1:25
reps <- 1:3
conditions <- c("Ctrl", "RNase")
ordered_names <- c()
for (fraction in fractions) {
for (rep in reps) {
for (condition in conditions) {
name <- paste0("Fraction", fraction, "_", condition, "_Rep", rep)
ordered_names <- c(ordered_names, name)
}
}
}
Norm_Data_for_t_NS <- Norm_Data_for_t_NS[, ordered_names]
#Calculation of CoM for T-Test
fractions <- 1:25
conditions <- c("Ctrl", "RNase")
replicates <- c("Rep1", "Rep2", "Rep3")
results_com_NS <- list()
for (cond in conditions) {
for (rep in replicates) {
pattern <- paste0("^Fraction", fractions, "_", cond, "_", rep, "$")
cols <- grep(paste(pattern, collapse="|"), colnames(Norm_Data_for_t_NS), value = TRUE)
subdata <- Norm_Data_for_t_NS[, cols]
subdata <- subdata[, order(as.numeric(gsub("Fraction(\\d+)_.*", "\\1", cols)))]
com <- apply(subdata, 1, function(x) {
sum(x * fractions) / sum(x)
})
results_com_NS[[paste(cond, rep, sep = "_")]] <- com
}
}
CoM_Data_for_t_NS <- as.data.frame(results_com_NS)
rownames(CoM_Data_for_t_NS) <- rownames(Norm_Data_for_t_NS)
# Calculating Shift-Values for T-Test
Shift_Data_for_t_NS <- data.frame(
shift_distance_rep1 = CoM_Data_for_t_NS[, 1] - CoM_Data_for_t_NS[, 4],
shift_distance_rep2 = CoM_Data_for_t_NS[, 2] - CoM_Data_for_t_NS[, 5],
shift_distance_rep3 = CoM_Data_for_t_NS[, 3] - CoM_Data_for_t_NS[, 6],
row.names = rownames(CoM_Data_for_t_NS)
)
#T-Test
Shift_Data_NS$shapiro_p <- NA
Shift_Data_NS$normal_distributed <- NA
Shift_Data_NS$p_value_ttest_filtered <- NA
Shift_Data_NS$significant_ttest_filtered <- NA
for (protein in rownames(Shift_Data_for_t_NS)) {
shift_values <- as.numeric(Shift_Data_for_t_NS[protein, c("shift_distance_rep1", "shift_distance_rep2", "shift_distance_rep3")])
if (all(!is.na(shift_values))) {
if (length(unique(shift_values)) == 1) {
Shift_Data_NS[protein, "shapiro_p"] <- NA
Shift_Data_NS[protein, "normal_distributed"] <- TRUE
} else {
shapiro_result <- shapiro.test(shift_values)
Shift_Data_NS[protein, "shapiro_p"] <- shapiro_result$p.value
Shift_Data_NS[protein, "normal_distributed"] <- shapiro_result$p.value >= 0.05
}
if (Shift_Data_NS[protein, "normal_distributed"] == TRUE) {
test_result <- t.test(shift_values, mu = 1, alternative = "greater")
Shift_Data_NS[protein, "p_value_ttest_filtered"] <- test_result$p.value
Shift_Data_NS[protein, "significant_ttest_filtered"] <- ifelse(test_result$p.value < 0.05, TRUE, FALSE)
} else {
Shift_Data_NS[protein, "p_value_ttest_filtered"] <- NA
Shift_Data_NS[protein, "significant_ttest_filtered"] <- NA
}
}
}
#Analysis of results for Nonsynchronised HeLa Cells
table(Shift_Data_NS$significant_ttest_filtered, useNA = "ifany")
# Identify proteins classified as significant RBPs in non-synchronized HeLa cells
t_test_positives_NS <- rownames(Shift_Data_NS[Shift_Data_NS$significant_ttest_filtered == TRUE & !is.na(Shift_Data_NS$significant_ttest_filtered), ])
# Determine protein overlap across datasets
overlap_analysis <- intersect(rownames(MS_Table_NS), rownames(MS_Table))
glue("Number of Proteins in sample NS_Hela: {length(rownames(MS_Table_NS))}")
glue("Number of Proteins analysed in both samples: {length(overlap_analysis)}")
# Identify proteins found as RBPs in both conditions
overlap_t_test_positivs <- intersect(t_test_positives, t_test_positives_NS)
glue("Number of RBPs found in both samples: {length(overlap_t_test_positivs)}")
# Identify RBPs found *only* in mitosis, and also present in both datasets
RBPs_Mitosis <- setdiff(t_test_positives, t_test_positives_NS)
RBPs_Mitosis <- intersect(RBPs_Mitosis, overlap_analysis)
glue("Number RBPs found only in Mitosis: {length(RBPs_Mitosis)}")
# Display a sample of plots (mitosis and non-synchronised) of RBPs uniquely active in mitosis
sample_RBPs_Mitosis <- head(RBPs_Mitosis,10)
for (r in sample_RBPs_Mitosis){
plot_protein(r)
plot_protein_NS(r)
}
plot_protein <- function(x) {
#extract data, define all variables and range of x- and y-achsis
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
max_val <- max(ctrl_values, rnase_values, na.rm = TRUE)
ylim_range <- c(0, max_val * 1.2)
#core plot function using crtl_values
plot(fractions, ctrl_values, type="o", pch=20, lty=1, lwd = 1.5,  col="forestgreen", ylim= ylim_range,
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest, axes = FALSE)
#add line for rnase_values
lines(fractions, rnase_values, type="o",pch =20, lty=1, lwd = 1.5,  col="firebrick3")
#color area under the curve
polygon(c(fractions, rev(fractions)),
c(ctrl_values, rep(0, length(ctrl_values))),
col=adjustcolor("forestgreen", alpha.f=0.1), border=NA)
polygon(c(fractions, rev(fractions)),
c(rnase_values, rep(0, length(rnase_values))),
col=adjustcolor("firebrick3", alpha.f=0.1), border=NA)
#add x- and y-achsis with correct lables
axis(1, at = 1:25, labels = 1:25, cex.axis = 0.7)
axis(2, cex.axis = 0.7, las =2)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = 0.8)
#add legend
legend("topright", legend=c("Ctrl", "RNase"), col=c("forestgreen", "firebrick3"),
lty=1, lwd = 1.5,  pch=20, bg = "white", bty = "o", box.col = NA, horiz = TRUE)
}
#example
plot_protein("RL27_HUMAN")
# Identify proteins classified as significant RBPs in non-synchronized HeLa cells
t_test_positives_NS <- rownames(Shift_Data_NS[Shift_Data_NS$significant_ttest_filtered == TRUE & !is.na(Shift_Data_NS$significant_ttest_filtered), ])
# Determine protein overlap across datasets
overlap_analysis <- intersect(rownames(MS_Table_NS), rownames(MS_Table))
glue("Number of Proteins in sample NS_Hela: {length(rownames(MS_Table_NS))}")
glue("Number of Proteins analysed in both samples: {length(overlap_analysis)}")
# Identify proteins found as RBPs in both conditions
overlap_t_test_positivs <- intersect(t_test_positives, t_test_positives_NS)
glue("Number of RBPs found in both samples: {length(overlap_t_test_positivs)}")
# Identify RBPs found *only* in mitosis, and also present in both datasets
RBPs_Mitosis <- setdiff(t_test_positives, t_test_positives_NS)
RBPs_Mitosis <- intersect(RBPs_Mitosis, overlap_analysis)
glue("Number RBPs found only in Mitosis: {length(RBPs_Mitosis)}")
# Display a sample of plots (mitosis and non-synchronised) of RBPs uniquely active in mitosis
sample_RBPs_Mitosis <- head(RBPs_Mitosis,10)
for (r in sample_RBPs_Mitosis){
plot_protein(r)
plot_protein_NS(r)
}
# Visualise differences in shift characteristics
# Define variables to extract from both datasets
cols_to_extract <- c("CoM_Ctrl", "CoM_RNase", "shift_distance", "shift_direction", "p_value_ttest_filtered", "significant_ttest_filtered")
# Subset and rename columns for both conditions
subset_data_S <- Shift_Data[overlap_analysis, cols_to_extract]
subset_data_NS <- Shift_Data_NS[overlap_analysis, cols_to_extract]
colnames(subset_data_S) <- paste0(colnames(subset_data_S), "_mitosis")
colnames(subset_data_NS) <- paste0(colnames(subset_data_NS), "_nonSync")
# Merge into one combined dataframe
Shift_Data_Combined <- cbind(subset_data_S,subset_data_NS)
head(Shift_Data_Combined)
#Scatterplot of shift distances
ggplot(Shift_Data_Combined, aes(x = `shift_distance_mitosis`,
y = `shift_distance_nonSync`,
color = case_when(
!`significant_ttest_filtered_mitosis` & !`significant_ttest_filtered_nonSync` ~ "No significant RBPs",
`significant_ttest_filtered_mitosis` & !`significant_ttest_filtered_nonSync` ~ "RBPs only active in Mitosis",
!`significant_ttest_filtered_mitosis` & `significant_ttest_filtered_nonSync` ~ "RBPs not active in Mitosis",
TRUE ~ "RBPs always active"
))) +
geom_point(alpha = 0.6) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
scale_color_manual(name = "Significance as RBP",
values = c(
"No significant RBPs" = "grey80",
"RBPs not active in Mitosis" = "gray30",
"RBPs always active" = "lightcoral",
"RBPs only active in Mitosis" = "darkred"
))+
labs(title = "Shift Distance: Mitosis vs. Non-Synchronized",
x = "Shift Distance (Mitosis)",
y = "Shift Distance (Non-Synchronized)") +
theme_minimal()
ggplot(Shift_Data_Combined, aes(x = `shift_distance_mitosis`,
y = `shift_distance_nonSync`,
color = case_when(
!`significant_ttest_filtered_mitosis` & !`significant_ttest_filtered_nonSync` ~ "No significant RBPs",
`significant_ttest_filtered_mitosis` & !`significant_ttest_filtered_nonSync` ~ "RBPs only active in Mitosis",
!`significant_ttest_filtered_mitosis` & `significant_ttest_filtered_nonSync` ~ "RBPs not active in Mitosis",
TRUE ~ "RBPs always active"
))) +
geom_point(alpha = 0.6) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
scale_color_manual(name = "Significance as RBP",
values = c(
"No significant RBPs" = "grey80",
"RBPs not active in Mitosis" = "gray30",
"RBPs always active" = "lightcoral",
"RBPs only active in Mitosis" = "darkred"
))+
labs(title = "Shift Distance: Mitosis vs. Non-Synchronized",
x = "Shift Distance (Mitosis)",
y = "Shift Distance (Non-Synchronized)") +
theme_minimal()
View(corum)
plot_protein_info <- function(x) {
#Split up plot area
layout(matrix(1:2, nrow = 1), widths = c(4, 2))  # 3:2 Verhältnis (Plot : Info)
#Extract data, define all variables and range of x- and y-achsis
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
max_val <- max(ctrl_values, rnase_values, na.rm = TRUE)
ylim_range <- c(0, max_val * 1.2)
#Core plot function using crtl_values
plot(fractions, ctrl_values, type="o", pch=20, lty=1, lwd = 1.5,  col="forestgreen", ylim= ylim_range,
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest, axes = FALSE)
#Add line for rnase_values
lines(fractions, rnase_values, type="o",pch =20, lty=1, lwd = 1.5,  col="firebrick3")
#Color area under the curve
polygon(c(fractions, rev(fractions)),
c(ctrl_values, rep(0, length(ctrl_values))),
col=adjustcolor("forestgreen", alpha.f=0.1), border=NA)
polygon(c(fractions, rev(fractions)),
c(rnase_values, rep(0, length(rnase_values))),
col=adjustcolor("firebrick3", alpha.f=0.1), border=NA)
#Add x- and y-achsis with correct lables
axis(1, at = 1:25, labels = 1:25, cex.axis = 0.7)
axis(2, cex.axis = 0.7, las =2)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = 0.8)
#Add legend
legend("topright", legend=c("Ctrl", "RNase"), col=c("forestgreen", "firebrick3"),
lty=1, lwd = 1.5,  pch=20, bg = "white", bty = "o", box.col = NA, horiz = TRUE)
# Add Info panel
par(mar = c(0, 0, 2, 0))
plot.new()
shift_info <- subset_data_S[rownames(subset_data_S) == x, ]
info_lines <- c(
paste("CoM Ctrl:",round(shift_info$CoM_Ctrl_mitosis, 1)),
paste("CoM RNase:", round(shift_info$CoM_RNase_mitosis, 1)),
paste("Shift Distance:", round(shift_info$shift_distance_mitosis, 1)),
paste("Identified as RBP:", shift_info$significant_ttest_filtered_mitosis),
)
line_height <- 0.06
n_lines <- length(info_lines)
y_start <- 0.5 + (n_lines - 1) * line_height / 2
for (i in seq_along(info_lines)) {
y_pos <- y_start - (i - 1) * line_height
text(x = 0, y = y_pos, labels = info_lines[i], adj = c(0, 1), cex = 0.9)
}
}
plot_protein_info("RL27_HUMAN")
plot_protein_info <- function(x) {
#Split up plot area
layout(matrix(1:2, nrow = 1), widths = c(4, 2))  # 3:2 Verhältnis (Plot : Info)
#Extract data, define all variables and range of x- and y-achsis
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
max_val <- max(ctrl_values, rnase_values, na.rm = TRUE)
ylim_range <- c(0, max_val * 1.2)
#Core plot function using crtl_values
plot(fractions, ctrl_values, type="o", pch=20, lty=1, lwd = 1.5,  col="forestgreen", ylim= ylim_range,
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest, axes = FALSE)
#Add line for rnase_values
lines(fractions, rnase_values, type="o",pch =20, lty=1, lwd = 1.5,  col="firebrick3")
#Color area under the curve
polygon(c(fractions, rev(fractions)),
c(ctrl_values, rep(0, length(ctrl_values))),
col=adjustcolor("forestgreen", alpha.f=0.1), border=NA)
polygon(c(fractions, rev(fractions)),
c(rnase_values, rep(0, length(rnase_values))),
col=adjustcolor("firebrick3", alpha.f=0.1), border=NA)
#Add x- and y-achsis with correct lables
axis(1, at = 1:25, labels = 1:25, cex.axis = 0.7)
axis(2, cex.axis = 0.7, las =2)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = 0.8)
#Add legend
legend("topright", legend=c("Ctrl", "RNase"), col=c("forestgreen", "firebrick3"),
lty=1, lwd = 1.5,  pch=20, bg = "white", bty = "o", box.col = NA, horiz = TRUE)
# Add Info panel
par(mar = c(0, 0, 2, 0))
plot.new()
shift_info <- subset_data_S[rownames(subset_data_S) == x, ]
info_lines <- c(
paste("CoM Ctrl:",round(shift_info$CoM_Ctrl_mitosis, 1)),
paste("CoM RNase:", round(shift_info$CoM_RNase_mitosis, 1)),
paste("Shift Distance:", round(shift_info$shift_distance_mitosis, 1)),
paste("Identified as RBP:", shift_info$significant_ttest_filtered_mitosis)
)
line_height <- 0.06
n_lines <- length(info_lines)
y_start <- 0.5 + (n_lines - 1) * line_height / 2
for (i in seq_along(info_lines)) {
y_pos <- y_start - (i - 1) * line_height
text(x = 0, y = y_pos, labels = info_lines[i], adj = c(0, 1), cex = 0.9)
}
}
plot_protein_info("RL27_HUMAN")
plot_protein_info("RS6_HUMAN")
plot_protein_info <- function(x) {
#Split up plot area
layout(matrix(1:2, nrow = 1), widths = c(5, 2))  # 3:2 Verhältnis (Plot : Info)
#Extract data, define all variables and range of x- and y-achsis
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
max_val <- max(ctrl_values, rnase_values, na.rm = TRUE)
ylim_range <- c(0, max_val * 1.2)
#Core plot function using crtl_values
plot(fractions, ctrl_values, type="o", pch=20, lty=1, lwd = 1.5,  col="forestgreen", ylim= ylim_range,
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest, axes = FALSE)
#Add line for rnase_values
lines(fractions, rnase_values, type="o",pch =20, lty=1, lwd = 1.5,  col="firebrick3")
#Color area under the curve
polygon(c(fractions, rev(fractions)),
c(ctrl_values, rep(0, length(ctrl_values))),
col=adjustcolor("forestgreen", alpha.f=0.1), border=NA)
polygon(c(fractions, rev(fractions)),
c(rnase_values, rep(0, length(rnase_values))),
col=adjustcolor("firebrick3", alpha.f=0.1), border=NA)
#Add x- and y-achsis with correct lables
axis(1, at = 1:25, labels = 1:25, cex.axis = 0.7)
axis(2, cex.axis = 0.7, las =2)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = 0.8)
#Add legend
legend("topright", legend=c("Ctrl", "RNase"), col=c("forestgreen", "firebrick3"),
lty=1, lwd = 1.5,  pch=20, bg = "white", bty = "o", box.col = NA, horiz = TRUE)
# Add Info panel
par(mar = c(0, 0, 2, 0))
plot.new()
shift_info <- subset_data_S[rownames(subset_data_S) == x, ]
info_lines <- c(
paste("CoM Ctrl:",round(shift_info$CoM_Ctrl_mitosis, 1)),
paste("CoM RNase:", round(shift_info$CoM_RNase_mitosis, 1)),
paste("Shift Distance:", round(shift_info$shift_distance_mitosis, 1)),
paste("Identified as RBP:", shift_info$significant_ttest_filtered_mitosis)
)
line_height <- 0.06
n_lines <- length(info_lines)
y_start <- 0.5 + (n_lines - 1) * line_height / 2
for (i in seq_along(info_lines)) {
y_pos <- y_start - (i - 1) * line_height
text(x = 0, y = y_pos, labels = info_lines[i], adj = c(0, 1), cex = 0.9)
}
}
plot_protein_info("RL27_HUMAN")
plot_protein_info("RL27_HUMAN")
plot_protein_info <- function(x) {
#Split up plot area
layout(matrix(1:2, nrow = 1), widths = c(4, 1))  # 3:2 Verhältnis (Plot : Info)
#Extract data, define all variables and range of x- and y-achsis
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
max_val <- max(ctrl_values, rnase_values, na.rm = TRUE)
ylim_range <- c(0, max_val * 1.2)
#Core plot function using crtl_values
plot(fractions, ctrl_values, type="o", pch=20, lty=1, lwd = 1.5,  col="forestgreen", ylim= ylim_range,
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest, axes = FALSE)
#Add line for rnase_values
lines(fractions, rnase_values, type="o",pch =20, lty=1, lwd = 1.5,  col="firebrick3")
#Color area under the curve
polygon(c(fractions, rev(fractions)),
c(ctrl_values, rep(0, length(ctrl_values))),
col=adjustcolor("forestgreen", alpha.f=0.1), border=NA)
polygon(c(fractions, rev(fractions)),
c(rnase_values, rep(0, length(rnase_values))),
col=adjustcolor("firebrick3", alpha.f=0.1), border=NA)
#Add x- and y-achsis with correct lables
axis(1, at = 1:25, labels = 1:25, cex.axis = 0.7)
axis(2, cex.axis = 0.7, las =2)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = 0.8)
#Add legend
legend("topright", legend=c("Ctrl", "RNase"), col=c("forestgreen", "firebrick3"),
lty=1, lwd = 1.5,  pch=20, bg = "white", bty = "o", box.col = NA, horiz = TRUE)
# Add Info panel
par(mar = c(0, 0, 2, 0))
plot.new()
shift_info <- subset_data_S[rownames(subset_data_S) == x, ]
info_lines <- c(
paste("CoM Ctrl:",round(shift_info$CoM_Ctrl_mitosis, 1)),
paste("CoM RNase:", round(shift_info$CoM_RNase_mitosis, 1)),
paste("Shift Distance:", round(shift_info$shift_distance_mitosis, 1)),
paste("Identified as RBP:", shift_info$significant_ttest_filtered_mitosis)
)
line_height <- 0.06
n_lines <- length(info_lines)
y_start <- 0.5 + (n_lines - 1) * line_height / 2
for (i in seq_along(info_lines)) {
y_pos <- y_start - (i - 1) * line_height
text(x = 0, y = y_pos, labels = info_lines[i], adj = c(0, 1), cex = 0.9)
}
}
plot_protein_info("RL27_HUMAN")
plot_protein_info <- function(x) {
#Split up plot area
layout(matrix(1:2, nrow = 1), widths = c(4, 1.5))  # 3:2 Verhältnis (Plot : Info)
#Extract data, define all variables and range of x- and y-achsis
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
max_val <- max(ctrl_values, rnase_values, na.rm = TRUE)
ylim_range <- c(0, max_val * 1.2)
#Core plot function using crtl_values
plot(fractions, ctrl_values, type="o", pch=20, lty=1, lwd = 1.5,  col="forestgreen", ylim= ylim_range,
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest, axes = FALSE)
#Add line for rnase_values
lines(fractions, rnase_values, type="o",pch =20, lty=1, lwd = 1.5,  col="firebrick3")
#Color area under the curve
polygon(c(fractions, rev(fractions)),
c(ctrl_values, rep(0, length(ctrl_values))),
col=adjustcolor("forestgreen", alpha.f=0.1), border=NA)
polygon(c(fractions, rev(fractions)),
c(rnase_values, rep(0, length(rnase_values))),
col=adjustcolor("firebrick3", alpha.f=0.1), border=NA)
#Add x- and y-achsis with correct lables
axis(1, at = 1:25, labels = 1:25, cex.axis = 0.7)
axis(2, cex.axis = 0.7, las =2)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = 0.8)
#Add legend
legend("topright", legend=c("Ctrl", "RNase"), col=c("forestgreen", "firebrick3"),
lty=1, lwd = 1.5,  pch=20, bg = "white", bty = "o", box.col = NA, horiz = TRUE)
# Add Info panel
par(mar = c(0, 0, 2, 0))
plot.new()
shift_info <- subset_data_S[rownames(subset_data_S) == x, ]
info_lines <- c(
paste("CoM Ctrl:",round(shift_info$CoM_Ctrl_mitosis, 1)),
paste("CoM RNase:", round(shift_info$CoM_RNase_mitosis, 1)),
paste("Shift Distance:", round(shift_info$shift_distance_mitosis, 1)),
paste("Identified as RBP:", shift_info$significant_ttest_filtered_mitosis)
)
line_height <- 0.06
n_lines <- length(info_lines)
y_start <- 0.5 + (n_lines - 1) * line_height / 2
for (i in seq_along(info_lines)) {
y_pos <- y_start - (i - 1) * line_height
text(x = 0, y = y_pos, labels = info_lines[i], adj = c(0, 1), cex = 0.9)
}
}
plot_protein_info("RL27_HUMAN")
plot_protein_info("RS6_HUMAN")
plot_protein_info("RL27_HUMAN")
plot_protein_info("RS6_HUMAN")
plot_protein_info("RL27_HUMAN")
plot_protein_info <- function(x) {
#Split up plot area
layout(matrix(1:2, nrow = 1), widths = c(4, 1.5))  # 3:2 Verhältnis (Plot : Info)
#Extract data, define all variables and range of x- and y-achsis
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
max_val <- max(ctrl_values, rnase_values, na.rm = TRUE)
ylim_range <- c(0, max_val * 1.2)
#Core plot function using crtl_values
plot(fractions, ctrl_values, type="o", pch=20, lty=1, lwd = 1.5,  col="forestgreen", ylim= ylim_range,
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest, axes = FALSE)
#Add line for rnase_values
lines(fractions, rnase_values, type="o",pch =20, lty=1, lwd = 1.5,  col="firebrick3")
#Color area under the curve
polygon(c(fractions, rev(fractions)),
c(ctrl_values, rep(0, length(ctrl_values))),
col=adjustcolor("forestgreen", alpha.f=0.1), border=NA)
polygon(c(fractions, rev(fractions)),
c(rnase_values, rep(0, length(rnase_values))),
col=adjustcolor("firebrick3", alpha.f=0.1), border=NA)
#Add x- and y-achsis with correct lables
axis(1, at = 1:25, labels = 1:25, cex.axis = 0.7)
axis(2, cex.axis = 0.7, las =2)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = 0.8)
#Add legend
legend("topright", legend=c("Ctrl", "RNase"), col=c("forestgreen", "firebrick3"),
lty=1, lwd = 1.5,  pch=20, bg = "white", bty = "o", box.col = NA, horiz = TRUE)
# Add Info panel
par(mar = c(0, 0, 2, 0))
plot.new()
shift_info <- subset_data_S[rownames(subset_data_S) == x, ]
info_lines <- c(
paste("CoM Ctrl:",round(shift_info$CoM_Ctrl_mitosis, 1)),
paste("CoM RNase:", round(shift_info$CoM_RNase_mitosis, 1)),
paste("Shift Distance:", round(shift_info$shift_distance_mitosis, 1)),
paste("Identified as RBP:", shift_info$significant_ttest_filtered_mitosis)
)
line_height <- 0.06
n_lines <- length(info_lines)
y_start <- 0.5 + (n_lines - 1) * line_height / 2
for (i in seq_along(info_lines)) {
y_pos <- y_start - (i - 1) * line_height
text(x = 0, y = y_pos, labels = info_lines[i], adj = c(0, 1), cex = 0.9)
}
}
plot_protein_info("RS6_HUMAN")
plot_protein_info("RS6_HUMAN")
plot_protein("RS6_HUMAN")
# Extract the position of the strongest (highest) peak for each protein in the RNase condition
max_peak_positions <- numeric(nrow(Peak_Data))
