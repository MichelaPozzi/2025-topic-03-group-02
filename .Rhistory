c(rnase_values, rep(0, length(rnase_values))),
col=adjustcolor("firebrick3", alpha.f=0.1), border=NA)
#Add x- and y-achsis with correct lables
axis(1, at = 1:25, labels = 1:25, cex.axis = 0.7)
axis(2, cex.axis = 0.7, las =2)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = 0.8)
#Add legend
legend("topright", legend=c("Ctrl", "RNase"), col=c("forestgreen", "firebrick3"),
lty=1, lwd = 1.5,  pch=20, bg = "white", bty = "o", box.col = NA, horiz = TRUE)
# Add Info panel
par(mar = c(0, 0, 2, 0))
plot.new()
shift_info <- subset_data_S[rownames(subset_data_S) == x, ]
info_lines <- c(
paste("CoM Ctrl:",round(shift_info$CoM_Ctrl_mitosis, 1)),
paste("CoM RNase:", round(shift_info$CoM_RNase_mitosis, 1)),
paste("Shift Distance:", round(shift_info$shift_distance_mitosis, 1)),
paste("Identified as RBP:", shift_info$significant_ttest_filtered_mitosis)
)
line_height <- 0.06
n_lines <- length(info_lines)
y_start <- 0.5 + (n_lines - 1) * line_height / 2
for (i in seq_along(info_lines)) {
y_pos <- y_start - (i - 1) * line_height
text(x = 0, y = y_pos, labels = info_lines[i], adj = c(0, 1), cex = 0.9)
}
}
plot_protein_info("RL27_HUMAN")
plot_protein_info("RS6_HUMAN")
plot_protein_info <- function(x) {
#Split up plot area
layout(matrix(1:2, nrow = 1), widths = c(5, 2))  # 3:2 Verhältnis (Plot : Info)
#Extract data, define all variables and range of x- and y-achsis
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
max_val <- max(ctrl_values, rnase_values, na.rm = TRUE)
ylim_range <- c(0, max_val * 1.2)
#Core plot function using crtl_values
plot(fractions, ctrl_values, type="o", pch=20, lty=1, lwd = 1.5,  col="forestgreen", ylim= ylim_range,
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest, axes = FALSE)
#Add line for rnase_values
lines(fractions, rnase_values, type="o",pch =20, lty=1, lwd = 1.5,  col="firebrick3")
#Color area under the curve
polygon(c(fractions, rev(fractions)),
c(ctrl_values, rep(0, length(ctrl_values))),
col=adjustcolor("forestgreen", alpha.f=0.1), border=NA)
polygon(c(fractions, rev(fractions)),
c(rnase_values, rep(0, length(rnase_values))),
col=adjustcolor("firebrick3", alpha.f=0.1), border=NA)
#Add x- and y-achsis with correct lables
axis(1, at = 1:25, labels = 1:25, cex.axis = 0.7)
axis(2, cex.axis = 0.7, las =2)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = 0.8)
#Add legend
legend("topright", legend=c("Ctrl", "RNase"), col=c("forestgreen", "firebrick3"),
lty=1, lwd = 1.5,  pch=20, bg = "white", bty = "o", box.col = NA, horiz = TRUE)
# Add Info panel
par(mar = c(0, 0, 2, 0))
plot.new()
shift_info <- subset_data_S[rownames(subset_data_S) == x, ]
info_lines <- c(
paste("CoM Ctrl:",round(shift_info$CoM_Ctrl_mitosis, 1)),
paste("CoM RNase:", round(shift_info$CoM_RNase_mitosis, 1)),
paste("Shift Distance:", round(shift_info$shift_distance_mitosis, 1)),
paste("Identified as RBP:", shift_info$significant_ttest_filtered_mitosis)
)
line_height <- 0.06
n_lines <- length(info_lines)
y_start <- 0.5 + (n_lines - 1) * line_height / 2
for (i in seq_along(info_lines)) {
y_pos <- y_start - (i - 1) * line_height
text(x = 0, y = y_pos, labels = info_lines[i], adj = c(0, 1), cex = 0.9)
}
}
plot_protein_info("RL27_HUMAN")
plot_protein_info("RL27_HUMAN")
plot_protein_info <- function(x) {
#Split up plot area
layout(matrix(1:2, nrow = 1), widths = c(4, 1))  # 3:2 Verhältnis (Plot : Info)
#Extract data, define all variables and range of x- and y-achsis
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
max_val <- max(ctrl_values, rnase_values, na.rm = TRUE)
ylim_range <- c(0, max_val * 1.2)
#Core plot function using crtl_values
plot(fractions, ctrl_values, type="o", pch=20, lty=1, lwd = 1.5,  col="forestgreen", ylim= ylim_range,
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest, axes = FALSE)
#Add line for rnase_values
lines(fractions, rnase_values, type="o",pch =20, lty=1, lwd = 1.5,  col="firebrick3")
#Color area under the curve
polygon(c(fractions, rev(fractions)),
c(ctrl_values, rep(0, length(ctrl_values))),
col=adjustcolor("forestgreen", alpha.f=0.1), border=NA)
polygon(c(fractions, rev(fractions)),
c(rnase_values, rep(0, length(rnase_values))),
col=adjustcolor("firebrick3", alpha.f=0.1), border=NA)
#Add x- and y-achsis with correct lables
axis(1, at = 1:25, labels = 1:25, cex.axis = 0.7)
axis(2, cex.axis = 0.7, las =2)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = 0.8)
#Add legend
legend("topright", legend=c("Ctrl", "RNase"), col=c("forestgreen", "firebrick3"),
lty=1, lwd = 1.5,  pch=20, bg = "white", bty = "o", box.col = NA, horiz = TRUE)
# Add Info panel
par(mar = c(0, 0, 2, 0))
plot.new()
shift_info <- subset_data_S[rownames(subset_data_S) == x, ]
info_lines <- c(
paste("CoM Ctrl:",round(shift_info$CoM_Ctrl_mitosis, 1)),
paste("CoM RNase:", round(shift_info$CoM_RNase_mitosis, 1)),
paste("Shift Distance:", round(shift_info$shift_distance_mitosis, 1)),
paste("Identified as RBP:", shift_info$significant_ttest_filtered_mitosis)
)
line_height <- 0.06
n_lines <- length(info_lines)
y_start <- 0.5 + (n_lines - 1) * line_height / 2
for (i in seq_along(info_lines)) {
y_pos <- y_start - (i - 1) * line_height
text(x = 0, y = y_pos, labels = info_lines[i], adj = c(0, 1), cex = 0.9)
}
}
plot_protein_info("RL27_HUMAN")
plot_protein_info <- function(x) {
#Split up plot area
layout(matrix(1:2, nrow = 1), widths = c(4, 1.5))  # 3:2 Verhältnis (Plot : Info)
#Extract data, define all variables and range of x- and y-achsis
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
max_val <- max(ctrl_values, rnase_values, na.rm = TRUE)
ylim_range <- c(0, max_val * 1.2)
#Core plot function using crtl_values
plot(fractions, ctrl_values, type="o", pch=20, lty=1, lwd = 1.5,  col="forestgreen", ylim= ylim_range,
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest, axes = FALSE)
#Add line for rnase_values
lines(fractions, rnase_values, type="o",pch =20, lty=1, lwd = 1.5,  col="firebrick3")
#Color area under the curve
polygon(c(fractions, rev(fractions)),
c(ctrl_values, rep(0, length(ctrl_values))),
col=adjustcolor("forestgreen", alpha.f=0.1), border=NA)
polygon(c(fractions, rev(fractions)),
c(rnase_values, rep(0, length(rnase_values))),
col=adjustcolor("firebrick3", alpha.f=0.1), border=NA)
#Add x- and y-achsis with correct lables
axis(1, at = 1:25, labels = 1:25, cex.axis = 0.7)
axis(2, cex.axis = 0.7, las =2)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = 0.8)
#Add legend
legend("topright", legend=c("Ctrl", "RNase"), col=c("forestgreen", "firebrick3"),
lty=1, lwd = 1.5,  pch=20, bg = "white", bty = "o", box.col = NA, horiz = TRUE)
# Add Info panel
par(mar = c(0, 0, 2, 0))
plot.new()
shift_info <- subset_data_S[rownames(subset_data_S) == x, ]
info_lines <- c(
paste("CoM Ctrl:",round(shift_info$CoM_Ctrl_mitosis, 1)),
paste("CoM RNase:", round(shift_info$CoM_RNase_mitosis, 1)),
paste("Shift Distance:", round(shift_info$shift_distance_mitosis, 1)),
paste("Identified as RBP:", shift_info$significant_ttest_filtered_mitosis)
)
line_height <- 0.06
n_lines <- length(info_lines)
y_start <- 0.5 + (n_lines - 1) * line_height / 2
for (i in seq_along(info_lines)) {
y_pos <- y_start - (i - 1) * line_height
text(x = 0, y = y_pos, labels = info_lines[i], adj = c(0, 1), cex = 0.9)
}
}
plot_protein_info("RL27_HUMAN")
plot_protein_info("RS6_HUMAN")
plot_protein_info("RL27_HUMAN")
plot_protein_info("RS6_HUMAN")
plot_protein_info("RL27_HUMAN")
plot_protein_info <- function(x) {
#Split up plot area
layout(matrix(1:2, nrow = 1), widths = c(4, 1.5))  # 3:2 Verhältnis (Plot : Info)
#Extract data, define all variables and range of x- and y-achsis
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
max_val <- max(ctrl_values, rnase_values, na.rm = TRUE)
ylim_range <- c(0, max_val * 1.2)
#Core plot function using crtl_values
plot(fractions, ctrl_values, type="o", pch=20, lty=1, lwd = 1.5,  col="forestgreen", ylim= ylim_range,
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest, axes = FALSE)
#Add line for rnase_values
lines(fractions, rnase_values, type="o",pch =20, lty=1, lwd = 1.5,  col="firebrick3")
#Color area under the curve
polygon(c(fractions, rev(fractions)),
c(ctrl_values, rep(0, length(ctrl_values))),
col=adjustcolor("forestgreen", alpha.f=0.1), border=NA)
polygon(c(fractions, rev(fractions)),
c(rnase_values, rep(0, length(rnase_values))),
col=adjustcolor("firebrick3", alpha.f=0.1), border=NA)
#Add x- and y-achsis with correct lables
axis(1, at = 1:25, labels = 1:25, cex.axis = 0.7)
axis(2, cex.axis = 0.7, las =2)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = 0.8)
#Add legend
legend("topright", legend=c("Ctrl", "RNase"), col=c("forestgreen", "firebrick3"),
lty=1, lwd = 1.5,  pch=20, bg = "white", bty = "o", box.col = NA, horiz = TRUE)
# Add Info panel
par(mar = c(0, 0, 2, 0))
plot.new()
shift_info <- subset_data_S[rownames(subset_data_S) == x, ]
info_lines <- c(
paste("CoM Ctrl:",round(shift_info$CoM_Ctrl_mitosis, 1)),
paste("CoM RNase:", round(shift_info$CoM_RNase_mitosis, 1)),
paste("Shift Distance:", round(shift_info$shift_distance_mitosis, 1)),
paste("Identified as RBP:", shift_info$significant_ttest_filtered_mitosis)
)
line_height <- 0.06
n_lines <- length(info_lines)
y_start <- 0.5 + (n_lines - 1) * line_height / 2
for (i in seq_along(info_lines)) {
y_pos <- y_start - (i - 1) * line_height
text(x = 0, y = y_pos, labels = info_lines[i], adj = c(0, 1), cex = 0.9)
}
}
plot_protein_info("RS6_HUMAN")
plot_protein_info("RS6_HUMAN")
plot_protein("RS6_HUMAN")
# Extract the position of the strongest (highest) peak for each protein in the RNase condition
max_peak_positions <- numeric(nrow(Peak_Data))
knitr::opts_chunk$set(echo = TRUE)
#General
library(tidyverse)   # collection of tidy data tools (ggplot2, dplyr, tidyr, etc.) for wrangling, plotting, and transforming datasets --> specifically used libraries explained and loaded as well for an overview
library(tidyr)       #  provides functions for transforming and reshaping data structures — used for pivot_wider to convert long-format correlation data into a wide matrix for heatmap input
library(pheatmap)    # generates customizable heatmaps; used to visualize the Spearman correlation matrix between all replicate-fraction combinations
library(glue) # easy string construction with embedded variables and functions
library(ggplot2) # various plots (elegant, versatile and easy to use)
library(dplyr) # for conditional logic with case_when inside plot aesthetics, also for filtering and selecting relevant data <- @Sofia: nur bei mir... kann sein, dass ihr da noch andere funktionen von nutzt , Cihan hat nachgeschaut und ergänzt :=)
library(dbscan) # neccesary for scaling in order to later run density based clustering
# Chunk Additional Data
library(httr) # making API requests to UniProt (GET requests and response handling)
library(jsonlite) #parsing JSON responses from the UniProt API
library(pbapply) # applying functions with a progress bar
library(data.table) # fast loading of large tables (CORUM) and simple grouping / restructuring of data using [i, j, by] syntax
MS_Table <- read.table("RDeeP_HeLa_Mitosis.csv", header = TRUE, row.names = 1, sep = ";")
glue("Number of proteins analysed /rows : {nrow(MS_Table)}")
glue("Number of columns: {ncol(MS_Table)} (25 fractions with each 3 replicates for Ctrl and RNase treatment)")
glue("Classifikation of variables: {unique(sapply(MS_Table, class))}")
glue("Any missing values: {any(is.na(MS_Table))}")
glue("Overall minimum intenstity: {min(MS_Table)}")
glue("Overall maximum intenstity: {max(MS_Table)}")
# Create a metadata dataframe with factor columns that map each MS_Table column to its experimental treatment, replicate, and fraction number
treatment <- factor(rep(c("Ctrl", "RNase"), each = 3, length.out = 150))
replicate <- factor(rep(c("Ctrl_Rep1", "Ctrl_Rep2", "Ctrl_Rep3", "RNase_Rep1","RNase_Rep2", "RNase_Rep3"),25))
fraction <- factor(rep(paste0("Fraction_", 1:25), each = 6))
data <- data.frame(rownames = colnames(MS_Table),treatment = treatment, replicate = replicate, fraction = fraction)
# Iterate over all fraction levels: for each fraction, select replicate columns of Ctrl and RNase, compute row-wise means and store them in previously created list
average.list <- list()
for (f in levels(fraction)) {
cols.Ctrl <- which(fraction == f & treatment == "Ctrl")
average.Ctrl <- rowMeans(MS_Table[,cols.Ctrl])
average.list[[paste0("Ctrl_",f)]] <- average.Ctrl
cols.RNase <- which(fraction == f & treatment == "RNase")
average.RNase <- rowMeans(MS_Table[,cols.RNase])
average.list[[paste0("RNase_",f)]] <- average.RNase
}
# Convert the list of averages to a data frame and restore rownames
MS_Table_Averages <- as.data.frame(average.list)
rownames(MS_Table_Averages) <- rownames(MS_Table)
# Reorder columns: alphabetic order of 'levels()' breaks fraction sequence,
# so construct correct order manually (Ctrl_1 to Ctrl_25, then RNase_1 to RNase_25)
fractions <- paste0("Fraction_", 1:25)
ordered_names <- as.vector(rbind(
paste0("Ctrl_", fractions),
paste0("RNase_", fractions)
))
MS_Table_Averages <- MS_Table_Averages[, ordered_names]
library(dplyr)
# -------------- PART 1: Plot for standart deviation for all 7159 proteins from MS_Table_Averages for each fraction for the CTRL condition ----------
# 1. Select Ctrl columns using grep
ctrl_cols <- grep("^Ctrl_Fraction_", colnames(MS_Table_Averages), value = TRUE)
# 2. Randomly pick 25 proteins (rows)
set.seed(123)
selected <- sample(rownames(MS_Table_Averages), 25)
data <- MS_Table_Averages[selected, ctrl_cols]
# 3. Calculate mean and SE per protein (row-wise)
mean_vals <- apply(data, 1, mean, na.rm = TRUE)
se_vals <- apply(data, 1, function(x) sd(x, na.rm = TRUE) / sqrt(length(na.omit(x))))
# 4. Identify outliers for each protein
outliers <- lapply(1:nrow(data), function(i) {
vals <- as.numeric(data[i, ])
q1 <- quantile(vals, 0.25, na.rm = TRUE)
q3 <- quantile(vals, 0.75, na.rm = TRUE)
iqr <- q3 - q1
out_idx <- which(vals < (q1 - 1.5 * iqr) | vals > (q3 + 1.5 * iqr))
if (length(out_idx) > 0) {
data.frame(Protein = rownames(data)[i],
Intensity = vals[out_idx])
}
})
outlier_df <- do.call(rbind, outliers)
# 5. Create summary dataframe
summary_df <- data.frame(
Protein = rownames(data),
Mean = mean_vals,
SE = se_vals
)
# 6. Plot (no log scale)
ggplot(summary_df, aes(x = Protein, y = Mean)) +
geom_bar(stat = "identity", fill = "gray70") +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.3) +
geom_point(data = outlier_df, aes(x = Protein, y = Intensity),
color = "darkred", size = 2, position = position_jitter(width = 0.2)) +
labs(title = "Mean Intensity per Protein",
y = "Mean Intensity", x = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Split up Control and RNAse values
ctrl_cols <- grep("^Ctrl_", colnames(MS_Table_Averages))
rnase_cols <- grep("^RNase_", colnames(MS_Table_Averages))
# Normalization of each group to 100
ctrl_norm <- MS_Table_Averages[, ctrl_cols] / rowSums(MS_Table_Averages[, ctrl_cols]) * 100
rnase_norm <- MS_Table_Averages[, rnase_cols] / rowSums(MS_Table_Averages[, rnase_cols]) * 100
# Combine in one table
MS_Table_Norm <- cbind(ctrl_norm, rnase_norm)
MS_Table_Norm <- MS_Table_Norm[, colnames(MS_Table_Averages)]
head(round(MS_Table_Norm, 2))
# Verify the calculation with one example; the row sum should be ~200 (Ctrl 100% + RNAse 100%)
rowSums(MS_Table_Norm["1433B_HUMAN", ])
plot_protein <- function(x) {
#extract data, define all variables and range of x- and y-achsis
protein_of_interest <- x
protein_row <- MS_Table_Norm[rownames(MS_Table_Norm) == protein_of_interest, ]
ctrl_values <- as.numeric(protein_row[seq(1, 49, by=2)])
rnase_values <- as.numeric(protein_row[seq(2, 50, by=2)])
fractions <- 1:25
max_val <- max(ctrl_values, rnase_values, na.rm = TRUE)
ylim_range <- c(0, max_val * 1.2)
#core plot function using crtl_values
plot(fractions, ctrl_values, type="o", pch=20, lty=1, lwd = 1.5,  col="forestgreen", ylim= ylim_range,
xlab="Fraction", ylab="Normalized Intensity", main= protein_of_interest, axes = FALSE)
#add line for rnase_values
lines(fractions, rnase_values, type="o",pch =20, lty=1, lwd = 1.5,  col="firebrick3")
#color area under the curve
polygon(c(fractions, rev(fractions)),
c(ctrl_values, rep(0, length(ctrl_values))),
col=adjustcolor("forestgreen", alpha.f=0.1), border=NA)
polygon(c(fractions, rev(fractions)),
c(rnase_values, rep(0, length(rnase_values))),
col=adjustcolor("firebrick3", alpha.f=0.1), border=NA)
#add x- and y-achsis with correct lables
axis(1, at = 1:25, labels = 1:25, cex.axis = 0.7)
axis(2, cex.axis = 0.7, las =2)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted", lwd = 0.8)
#add legend
legend("topright", legend=c("Ctrl", "RNase"), col=c("forestgreen", "firebrick3"),
lty=1, lwd = 1.5,  pch=20, bg = "white", bty = "o", box.col = NA, horiz = TRUE)
}
#example
plot_protein("RL27_HUMAN")
# Create empty dataframe for correlation
full_correlation_results <- data.frame(
Treatment = character(),
Replicate_1 = character(),
Fraction_1 = character(),
Replicate_2 = character(),
Fraction_2 = character(),
Spearman_r = numeric(),
stringsAsFactors = FALSE
)
# Iterate over both Ctrl and RNase Treatment
for (treatment in c("Ctrl", "RNase")) {
# Create all possible rep-fraction combinations
combo1 <- expand.grid(Rep = 1:3, Fraction = 1:25)
combo2 <- expand.grid(Rep = 1:3, Fraction = 1:25)
# Iterate for every possible combination
for (i in 1:nrow(combo1)) {
for (j in 1:nrow(combo2)) {
rep1 <- combo1$Rep[i]
frac1 <- combo1$Fraction[i]
rep2 <- combo2$Rep[j]
frac2 <- combo2$Fraction[j]
# Find right column position
col1 <- which(replicate == paste0(treatment, "_Rep", rep1) & fraction == paste0("Fraction_", frac1))
col2 <- which(replicate == paste0(treatment, "_Rep", rep2) & fraction == paste0("Fraction_", frac2))
# Calculate Spearmen correlation
cor_value <- cor(MS_Table[, col1], MS_Table[, col2], method = "spearman", use = "complete.obs")
# Safe results in dataframe
full_correlation_results <- rbind(full_correlation_results, data.frame(
Treatment = treatment,
Replicate_1 = paste0("Rep", rep1),
Fraction_1 = paste0("Fraction_", frac1),
Replicate_2 = paste0("Rep", rep2),
Fraction_2 = paste0("Fraction_", frac2),
Spearman_r = cor_value
))
}
}
}
head(full_correlation_results)
# create column for each axis
full_correlation_results <- full_correlation_results %>%
mutate(Row = paste0(Replicate_1, "_F", gsub("Fraction_", "", Fraction_1)),
Col = paste0(Replicate_2, "_F", gsub("Fraction_", "", Fraction_2)))
# we select treament RNase for our first heatmap
treatment_to_plot_RNase <- "RNase"
# filter table for selected treatment: RNase
heatmap_data_RNase <- full_correlation_results %>%
filter(Treatment == treatment_to_plot_RNase) %>%
select(Row, Col, Spearman_r)
# convert into matrix
heatmap_matrix_RNase <- heatmap_data_RNase %>%
pivot_wider(names_from = Col, values_from = Spearman_r, values_fill = NA) %>%
column_to_rownames("Row") %>%
as.matrix()
# create heatmap for RNase treatment
print(pheatmap(heatmap_matrix_RNase,
main = paste("Spearman Correlation Heatmap -", treatment_to_plot_RNase),
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
fontsize_row = 4,
fontsize_col = 4))
# we select treament Ctrl for our second heatmap
treatment_to_plot_Ctrl <- "Ctrl"
# filter table for selected treatment: Ctrl
heatmap_data_Ctrl <- full_correlation_results %>%
filter(Treatment == treatment_to_plot_Ctrl) %>%
select(Row, Col, Spearman_r)
# convert into matrix
heatmap_matrix_Ctrl <- heatmap_data_Ctrl %>%
pivot_wider(names_from = Col, values_from = Spearman_r, values_fill = NA) %>%
column_to_rownames("Row") %>%
as.matrix()
# create heatmap for Ctrl treatment
print(pheatmap(heatmap_matrix_Ctrl,
main = paste("Spearman Correlation Heatmap -", treatment_to_plot_Ctrl),
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
fontsize_row = 4,
fontsize_col = 4))
png("Spearman_Correlation_Heatmap_RNase.png", width = 1200, height = 1200, res = 150)
pheatmap(heatmap_matrix_RNase,
main = "Spearman Correlation Heatmap - RNase",
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
fontsize_row = 4,
fontsize_col = 4)
dev.off()
png("Spearman_Correlation_Heatmap_RNase.png", width = 1200, height = 1000, res = 150)
> pheatmap(heatmap_matrix_RNase,
png("Spearman_Correlation_Heatmap_RNase.png", width = 1200, height = 1000, res = 150)
pheatmap(heatmap_matrix_RNase,
main = "Spearman Correlation Heatmap - RNase",
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
fontsize_row = 4,
fontsize_col = 4)
dev.off()
png("Spearman_Correlation_Heatmap_RNase.png", width = 1200, height = 800, res = 150)
pheatmap(heatmap_matrix_RNase,
main = "Spearman Correlation Heatmap - RNase",
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
fontsize_row = 4,
fontsize_col = 4)
dev.off()
png("Spearman_Correlation_Heatmap_Ctrl.png", width = 1200, height = 800, res = 150)
pheatmap(heatmap_matrix_Ctrl,
main = "Spearman Correlation Heatmap - Ctrl",
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
fontsize_row = 4,
fontsize_col = 4)
dev.off()
knitr::opts_chunk$set(echo = TRUE)
# Extract the position of the strongest (highest) peak for each protein in the RNase condition
max_peak_positions <- numeric(nrow(Peak_Data))
cv <- sd(clean_merged_filterd_mitosis) / mean(clean_merged_filterd_mitosis)
#from the two shift and peak characteristics we extract some variables creating a new merged table which also has only the names of the RBPs that are aktive in mitosis !! hier stimmt was nicht.
# 1) Filter only the RBPs relevant in Mitosis
filtered_shift_Mitosis <- Shift_Data[rownames(Shift_Data) %in% RBPs_Mitosis, ]
#General
library(tidyverse)   # collection of tidy data tools (ggplot2, dplyr, tidyr, etc.) for wrangling, plotting, and transforming datasets --> specifically used libraries explained and loaded as well for an overview
library(tidyr)       #  provides functions for transforming and reshaping data structures — used for pivot_wider to convert long-format correlation data into a wide matrix for heatmap input
library(pheatmap)    # generates customizable heatmaps; used to visualize the Spearman correlation matrix between all replicate-fraction combinations
library(glue) # easy string construction with embedded variables and functions
library(ggplot2) # various plots (elegant, versatile and easy to use)
library(dplyr) # for conditional logic with case_when inside plot aesthetics, also for filtering and selecting relevant data <- @Sofia: nur bei mir... kann sein, dass ihr da noch andere funktionen von nutzt , Cihan hat nachgeschaut und ergänzt :=)
library(dbscan) # neccesary for scaling in order to later run density based clustering
# Chunk Additional Data
library(httr) # making API requests to UniProt (GET requests and response handling)
library(jsonlite) #parsing JSON responses from the UniProt API
library(pbapply) # applying functions with a progress bar
library(data.table) # fast loading of large tables (CORUM) and simple grouping / restructuring of data using [i, j, by] syntax
MS_Table <- read.table("RDeeP_HeLa_Mitosis.csv", header = TRUE, row.names = 1, sep = ";")
MS_Table <- read.table("RDeeP_HeLa_Mitosis.csv", header = TRUE, row.names = 1, sep = ";")
